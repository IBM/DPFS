<svg xmlns="http://www.w3.org/2000/svg" xmlns:fg="http://github.com/jonhoo/inferno" xmlns:xlink="http://www.w3.org/1999/xlink" width="1200" height="902" onload="init(evt)" version="1.1" viewBox="0 0 1200 902"><defs><linearGradient id="background" x1="0" x2="0" y1="0" y2="1"><stop offset="5%" stop-color="#eee"/><stop offset="95%" stop-color="#eeeeb0"/></linearGradient></defs><style type="text/css">text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); } #title { text-anchor:middle; font-size:17px; } #matched { text-anchor:end; } #search { text-anchor:end; opacity:0.1; cursor:pointer; } #search:hover, #search.show { opacity:1; } #subtitle { text-anchor:middle; font-color:rgb(160,160,160); } #unzoom { cursor:pointer; } #frames &gt; *:hover { stroke:black; stroke-width:0.5; cursor:pointer; } .hide { display:none; } .parent { opacity:0.5; }</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect width="100%" height="902" x="0" y="0" fill="url(#background)"/><text id="title" x="50%" y="24">Flame Graph</text><text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text><text id="search" x="1190" y="24">Search</text><svg id="frames" width="1180" x="10" total_samples="212575"><g><title>__GI_memcpy (381 samples, 0.18%)</title><rect width=".179%" height="15" x="1.054%" y="661" fill="#E30007" fg:w="381" fg:x="2240"/></g><g><title>snap_virtio_ctrl_bar_copy (400 samples, 0.19%)</title><rect width=".188%" height="15" x="1.048%" y="677" fill="#D90018" fg:w="400" fg:x="2228"/></g><g><title>__GI___libc_free (24 samples, 0.01%)</title><rect width=".011%" height="15" x="1.282%" y="661" fill="#DDC136" fg:w="24" fg:x="2726"/></g><g><title>__GI___memset_generic (103 samples, 0.05%)</title><rect width=".049%" height="15" x="1.347%" y="645" fill="#F8D406" fg:w="103" fg:x="2864"/></g><g><title>_int_malloc (114 samples, 0.05%)</title><rect width=".054%" height="15" x="1.398%" y="645" fill="#D04423" fg:w="114" fg:x="2971"/></g><g><title>unlink_chunk (52 samples, 0.02%)</title><rect width=".025%" height="15" x="1.427%" y="629" fill="#E88000" fg:w="52" fg:x="3033"/></g><g><title>__libc_calloc (345 samples, 0.16%)</title><rect width=".162%" height="15" x="1.294%" y="661" fill="#CFA02F" fg:w="345" fg:x="2750"/></g><g><title>_int_free (143 samples, 0.07%)</title><rect width=".067%" height="15" x="1.456%" y="661" fill="#E41722" fg:w="143" fg:x="3095"/></g><g><title>snap_update_pci_bdf (28 samples, 0.01%)</title><rect width=".013%" height="15" x="1.529%" y="661" fill="#DA1E1A" fg:w="28" fg:x="3251"/></g><g><title>_devx_get64 (233 samples, 0.11%)</title><rect width=".11%" height="15" x="1.558%" y="645" fill="#DC7A13" fg:w="233" fg:x="3312"/></g><g><title>__bswap_64 (233 samples, 0.11%)</title><rect width=".11%" height="15" x="1.558%" y="629" fill="#FAE42A" fg:w="233" fg:x="3312"/></g><g><title>snap_virtio_get_queue_attr (253 samples, 0.12%)</title><rect width=".119%" height="15" x="1.549%" y="661" fill="#F0C11C" fg:w="253" fg:x="3293"/></g><g><title>__fget (25 samples, 0.01%)</title><rect width=".012%" height="15" x="1.776%" y="485" fill="#D81425" fg:w="25" fg:x="3775"/></g><g><title>__fdget (48 samples, 0.02%)</title><rect width=".023%" height="15" x="1.773%" y="517" fill="#CEBC27" fg:w="48" fg:x="3769"/></g><g><title>__fget_light (48 samples, 0.02%)</title><rect width=".023%" height="15" x="1.773%" y="501" fill="#D9CF0D" fg:w="48" fg:x="3769"/></g><g><title>__srcu_read_lock (53 samples, 0.02%)</title><rect width=".025%" height="15" x="1.853%" y="485" fill="#E74926" fg:w="53" fg:x="3940"/></g><g><title>__check_object_size (40 samples, 0.02%)</title><rect width=".019%" height="15" x="1.981%" y="469" fill="#E1142E" fg:w="40" fg:x="4212"/></g><g><title>__kmalloc_node (83 samples, 0.04%)</title><rect width=".039%" height="15" x="2.009%" y="437" fill="#D21F29" fg:w="83" fg:x="4270"/></g><g><title>_uverbs_alloc (116 samples, 0.05%)</title><rect width=".055%" height="15" x="2%" y="469" fill="#DDC82F" fg:w="116" fg:x="4252"/></g><g><title>kvmalloc_node (101 samples, 0.05%)</title><rect width=".048%" height="15" x="2.007%" y="453" fill="#E21A05" fg:w="101" fg:x="4267"/></g><g><title>kvfree (29 samples, 0.01%)</title><rect width=".014%" height="15" x="2.061%" y="469" fill="#F9211A" fg:w="29" fg:x="4381"/></g><g><title>__arch_copy_to_user (61 samples, 0.03%)</title><rect width=".029%" height="15" x="2.115%" y="453" fill="#EBB71C" fg:w="61" fg:x="4496"/></g><g><title>memcg_kmem_put_cache (22 samples, 0.01%)</title><rect width=".01%" height="15" x="2.158%" y="405" fill="#DD0526" fg:w="22" fg:x="4588"/></g><g><title>__kmalloc_node (61 samples, 0.03%)</title><rect width=".029%" height="15" x="2.144%" y="421" fill="#F7122A" fg:w="61" fg:x="4557"/></g><g><title>memset (62 samples, 0.03%)</title><rect width=".029%" height="15" x="2.173%" y="421" fill="#F1832D" fg:w="62" fg:x="4620"/></g><g><title>_uverbs_alloc (137 samples, 0.06%)</title><rect width=".064%" height="15" x="2.144%" y="453" fill="#F91F1D" fg:w="137" fg:x="4557"/></g><g><title>kvmalloc_node (137 samples, 0.06%)</title><rect width=".064%" height="15" x="2.144%" y="437" fill="#E16F35" fg:w="137" fg:x="4557"/></g><g><title>devx_is_valid_obj_id (51 samples, 0.02%)</title><rect width=".024%" height="15" x="2.222%" y="453" fill="#EEA011" fg:w="51" fg:x="4723"/></g><g><title>_mlx5_tout_ms (33 samples, 0.02%)</title><rect width=".015%" height="15" x="2.344%" y="421" fill="#D69430" fg:w="33" fg:x="4983"/></g><g><title>_raw_spin_unlock_irq (152 samples, 0.07%)</title><rect width=".071%" height="15" x="2.366%" y="421" fill="#E82431" fg:w="152" fg:x="5030"/></g><g><title>cmd_ent_put (140 samples, 0.07%)</title><rect width=".066%" height="15" x="2.438%" y="421" fill="#D16718" fg:w="140" fg:x="5182"/></g><g><title>_raw_spin_unlock_irqrestore (139 samples, 0.07%)</title><rect width=".065%" height="15" x="2.438%" y="405" fill="#E55808" fg:w="139" fg:x="5183"/></g><g><title>free_msg (29 samples, 0.01%)</title><rect width=".014%" height="15" x="2.506%" y="421" fill="#D5B513" fg:w="29" fg:x="5326"/></g><g><title>_raw_spin_unlock_irqrestore (28 samples, 0.01%)</title><rect width=".013%" height="15" x="2.506%" y="405" fill="#FEBF36" fg:w="28" fg:x="5327"/></g><g><title>kmem_cache_alloc_trace (32 samples, 0.02%)</title><rect width=".015%" height="15" x="2.523%" y="421" fill="#F15325" fg:w="32" fg:x="5363"/></g><g><title>memcpy (89 samples, 0.04%)</title><rect width=".042%" height="15" x="2.538%" y="421" fill="#E92427" fg:w="89" fg:x="5395"/></g><g><title>dma_pool_alloc (225 samples, 0.11%)</title><rect width=".106%" height="15" x="2.592%" y="405" fill="#E20336" fg:w="225" fg:x="5511"/></g><g><title>_raw_spin_unlock_irqrestore (158 samples, 0.07%)</title><rect width=".074%" height="15" x="2.624%" y="389" fill="#F5C028" fg:w="158" fg:x="5578"/></g><g><title>kmem_cache_alloc_trace (51 samples, 0.02%)</title><rect width=".024%" height="15" x="2.698%" y="405" fill="#EEA71D" fg:w="51" fg:x="5736"/></g><g><title>mlx5_alloc_cmd_msg (370 samples, 0.17%)</title><rect width=".174%" height="15" x="2.58%" y="421" fill="#E8B633" fg:w="370" fg:x="5484"/></g><g><title>slabinfo_write (50 samples, 0.02%)</title><rect width=".024%" height="15" x="2.73%" y="405" fill="#E73C27" fg:w="50" fg:x="5804"/></g><g><title>dma_pool_free (116 samples, 0.05%)</title><rect width=".055%" height="15" x="2.76%" y="405" fill="#D0450C" fg:w="116" fg:x="5867"/></g><g><title>_raw_spin_unlock_irqrestore (100 samples, 0.05%)</title><rect width=".047%" height="15" x="2.768%" y="389" fill="#EB5D25" fg:w="100" fg:x="5883"/></g><g><title>kfree (42 samples, 0.02%)</title><rect width=".02%" height="15" x="2.814%" y="405" fill="#D57427" fg:w="42" fg:x="5983"/></g><g><title>mlx5_free_cmd_msg (176 samples, 0.08%)</title><rect width=".083%" height="15" x="2.757%" y="421" fill="#DECF1D" fg:w="176" fg:x="5860"/></g><g><title>queue_work_on (978 samples, 0.46%)</title><rect width=".46%" height="15" x="2.84%" y="421" fill="#CE601E" fg:w="978" fg:x="6036"/></g><g><title>_raw_spin_unlock_irq (107 samples, 0.05%)</title><rect width=".05%" height="15" x="3.303%" y="405" fill="#DA8A04" fg:w="107" fg:x="7022"/></g><g><title>_raw_spin_unlock_irqrestore (176 samples, 0.08%)</title><rect width=".083%" height="15" x="3.363%" y="389" fill="#FABF0E" fg:w="176" fg:x="7149"/></g><g><title>_raw_spin_unlock_irqrestore (31 samples, 0.01%)</title><rect width=".015%" height="15" x="3.447%" y="357" fill="#EF3C28" fg:w="31" fg:x="7328"/></g><g><title>del_timer_sync (44 samples, 0.02%)</title><rect width=".021%" height="15" x="3.446%" y="389" fill="#CE1B30" fg:w="44" fg:x="7325"/></g><g><title>try_to_del_timer_sync (42 samples, 0.02%)</title><rect width=".02%" height="15" x="3.447%" y="373" fill="#E12308" fg:w="42" fg:x="7327"/></g><g><title>cpu_cgroup_attach (24 samples, 0.01%)</title><rect width=".011%" height="15" x="3.49%" y="357" fill="#FAD518" fg:w="24" fg:x="7418"/></g><g><title>schedule (425 samples, 0.20%)</title><rect width=".2%" height="15" x="3.475%" y="389" fill="#F77B16" fg:w="425" fg:x="7388"/></g><g><title>__schedule (410 samples, 0.19%)</title><rect width=".193%" height="15" x="3.482%" y="373" fill="#E78A26" fg:w="410" fg:x="7403"/></g><g><title>finish_task_switch (371 samples, 0.17%)</title><rect width=".174%" height="15" x="3.501%" y="357" fill="#E7912E" fg:w="371" fg:x="7442"/></g><g><title>_raw_spin_unlock_irq (364 samples, 0.17%)</title><rect width=".171%" height="15" x="3.504%" y="341" fill="#FB760B" fg:w="364" fg:x="7449"/></g><g><title>cmd_exec (3,011 samples, 1.42%)</title><rect width="1.416%" height="15" x="2.26%" y="437" fill="#D99319" fg:w="3011" fg:x="4804"/></g><g><title>wait_for_completion_timeout (798 samples, 0.38%)</title><rect width=".375%" height="15" x="3.301%" y="421" fill="#F75125" fg:w="798" fg:x="7017"/></g><g><title>schedule_timeout (673 samples, 0.32%)</title><rect width=".317%" height="15" x="3.36%" y="405" fill="#D10C26" fg:w="673" fg:x="7142"/></g><g><title>memcpy (33 samples, 0.02%)</title><rect width=".015%" height="15" x="3.683%" y="437" fill="#E30109" fg:w="33" fg:x="7828"/></g><g><title>mlx5_cmd_do (3,096 samples, 1.46%)</title><rect width="1.456%" height="15" x="2.246%" y="453" fill="#F82F2B" fg:w="3096" fg:x="4774"/></g><g><title>__check_object_size (55 samples, 0.03%)</title><rect width=".026%" height="15" x="3.709%" y="437" fill="#DD0A1E" fg:w="55" fg:x="7885"/></g><g><title>uverbs_copy_to (84 samples, 0.04%)</title><rect width=".04%" height="15" x="3.702%" y="453" fill="#D2E501" fg:w="84" fg:x="7870"/></g><g><title>mlx5_ib_handler_MLX5_IB_METHOD_DEVX_OBJ_QUERY (3,531 samples, 1.66%)</title><rect width="1.661%" height="15" x="2.081%" y="469" fill="#DE9425" fg:w="3531" fg:x="4424"/></g><g><title>uverbs_finalize_object (35 samples, 0.02%)</title><rect width=".017%" height="15" x="3.751%" y="469" fill="#EA4321" fg:w="35" fg:x="7974"/></g><g><title>xas_load (58 samples, 0.03%)</title><rect width=".027%" height="15" x="3.799%" y="405" fill="#F76223" fg:w="58" fg:x="8075"/></g><g><title>xa_load (107 samples, 0.05%)</title><rect width=".05%" height="15" x="3.797%" y="421" fill="#F78A34" fg:w="107" fg:x="8071"/></g><g><title>xas_start (45 samples, 0.02%)</title><rect width=".021%" height="15" x="3.826%" y="405" fill="#D54F1E" fg:w="45" fg:x="8133"/></g><g><title>lookup_get_idr_uobject.part.0 (119 samples, 0.06%)</title><rect width=".056%" height="15" x="3.794%" y="437" fill="#F6B117" fg:w="119" fg:x="8066"/></g><g><title>ib_uverbs_cmd_verbs (4,207 samples, 1.98%)</title><rect width="1.979%" height="15" x="1.891%" y="485" fill="#E63E1B" fg:w="4207" fg:x="4019"/><text x="2.141%" y="495.5">i..</text></g><g><title>uverbs_get_uobject_from_file (217 samples, 0.10%)</title><rect width=".102%" height="15" x="3.768%" y="469" fill="#D89A08" fg:w="217" fg:x="8009"/></g><g><title>rdma_lookup_get_uobject (191 samples, 0.09%)</title><rect width=".09%" height="15" x="3.78%" y="453" fill="#F4232D" fg:w="191" fg:x="8035"/></g><g><title>radix_tree_next_chunk (69 samples, 0.03%)</title><rect width=".033%" height="15" x="3.881%" y="485" fill="#FB730C" fg:w="69" fg:x="8251"/></g><g><title>do_vfs_ioctl (4,517 samples, 2.12%)</title><rect width="2.125%" height="15" x="1.796%" y="517" fill="#F03632" fg:w="4517" fg:x="3817"/><text x="2.046%" y="527.5">d..</text></g><g><title>ib_uverbs_ioctl (4,457 samples, 2.10%)</title><rect width="2.097%" height="15" x="1.824%" y="501" fill="#E95434" fg:w="4457" fg:x="3877"/><text x="2.074%" y="511.5">i..</text></g><g><title>ksys_ioctl (4,606 samples, 2.17%)</title><rect width="2.167%" height="15" x="1.768%" y="533" fill="#CF752F" fg:w="4606" fg:x="3759"/><text x="2.018%" y="543.5">k..</text></g><g><title>__arm64_sys_ioctl (4,628 samples, 2.18%)</title><rect width="2.177%" height="15" x="1.76%" y="549" fill="#F92B27" fg:w="4628" fg:x="3741"/><text x="2.01%" y="559.5">_..</text></g><g><title>el0_svc (4,678 samples, 2.20%)</title><rect width="2.201%" height="15" x="1.739%" y="597" fill="#D1262C" fg:w="4678" fg:x="3696"/><text x="1.989%" y="607.5">e..</text></g><g><title>el0_svc_handler (4,678 samples, 2.20%)</title><rect width="2.201%" height="15" x="1.739%" y="581" fill="#ECD417" fg:w="4678" fg:x="3696"/><text x="1.989%" y="591.5">e..</text></g><g><title>el0_svc_common.constprop.0 (4,671 samples, 2.20%)</title><rect width="2.197%" height="15" x="1.742%" y="565" fill="#F24F15" fg:w="4671" fg:x="3703"/><text x="1.992%" y="575.5">e..</text></g><g><title>[libmlx5.so.1.23.40.0] (4,797 samples, 2.26%)</title><rect width="2.257%" height="15" x="1.697%" y="645" fill="#D36023" fg:w="4797" fg:x="3608"/><text x="1.947%" y="655.5">[..</text></g><g><title>execute_ioctl (4,786 samples, 2.25%)</title><rect width="2.251%" height="15" x="1.702%" y="629" fill="#FDD728" fg:w="4786" fg:x="3619"/><text x="1.952%" y="639.5">e..</text></g><g><title>__ioctl (4,725 samples, 2.22%)</title><rect width="2.223%" height="15" x="1.731%" y="613" fill="#D35115" fg:w="4725" fg:x="3680"/><text x="1.981%" y="623.5">_..</text></g><g><title>work_pending (31 samples, 0.01%)</title><rect width=".015%" height="15" x="3.939%" y="597" fill="#D0BE26" fg:w="31" fg:x="8374"/></g><g><title>do_notify_resume (31 samples, 0.01%)</title><rect width=".015%" height="15" x="3.939%" y="581" fill="#EBD526" fg:w="31" fg:x="8374"/></g><g><title>snap_virtio_ctrl_bar_update (6,273 samples, 2.95%)</title><rect width="2.951%" height="15" x="1.047%" y="693" fill="#ED7A26" fg:w="6273" fg:x="2225"/><text x="1.297%" y="703.5">sna..</text></g><g><title>snap_virtio_fs_query_device (5,869 samples, 2.76%)</title><rect width="2.761%" height="15" x="1.237%" y="677" fill="#F4DA23" fg:w="5869" fg:x="2629"/><text x="1.487%" y="687.5">sn..</text></g><g><title>snap_virtio_query_device (4,952 samples, 2.33%)</title><rect width="2.329%" height="15" x="1.668%" y="661" fill="#F0442F" fg:w="4952" fg:x="3546"/><text x="1.918%" y="671.5">s..</text></g><g><title>mlx5dv_devx_obj_query (79 samples, 0.04%)</title><rect width=".037%" height="15" x="3.961%" y="645" fill="#D21035" fg:w="79" fg:x="8419"/></g><g><title>[libmlx5.so.1.23.40.0] (48 samples, 0.02%)</title><rect width=".023%" height="15" x="3.975%" y="629" fill="#EB7C0C" fg:w="48" fg:x="8450"/></g><g><title>snap_virtio_ctrl_progress (6,305 samples, 2.97%)</title><rect width="2.966%" height="15" x="1.038%" y="709" fill="#E0A90B" fg:w="6305" fg:x="2206"/><text x="1.288%" y="719.5">sna..</text></g><g><title>snap_virtio_ctrl_pg_io_progress (201 samples, 0.09%)</title><rect width=".095%" height="15" x="4.706%" y="693" fill="#FAA602" fg:w="201" fg:x="10003"/></g><g><title>pthread_spin_lock (33,292 samples, 15.66%)</title><rect width="15.661%" height="15" x="8.487%" y="677" fill="#F2D81D" fg:w="33292" fg:x="18042"/><text x="8.737%" y="687.5">pthread_spin_lock</text></g><g><title>el0_irq_naked (58 samples, 0.03%)</title><rect width=".027%" height="15" x="24.121%" y="661" fill="#E6741B" fg:w="58" fg:x="51276"/></g><g><title>gic_handle_irq (58 samples, 0.03%)</title><rect width=".027%" height="15" x="24.121%" y="645" fill="#E46330" fg:w="58" fg:x="51276"/></g><g><title>__handle_domain_irq (58 samples, 0.03%)</title><rect width=".027%" height="15" x="24.121%" y="629" fill="#FD0B06" fg:w="58" fg:x="51276"/></g><g><title>irq_exit (58 samples, 0.03%)</title><rect width=".027%" height="15" x="24.121%" y="613" fill="#F78F27" fg:w="58" fg:x="51276"/></g><g><title>__softirqentry_text_start (58 samples, 0.03%)</title><rect width=".027%" height="15" x="24.121%" y="597" fill="#EC610A" fg:w="58" fg:x="51276"/></g><g><title>snap_virtio_fs_ctrl_queue_progress (5,690 samples, 2.68%)</title><rect width="2.677%" height="15" x="28.296%" y="661" fill="#E9D013" fg:w="5690" fg:x="60150"/><text x="28.546%" y="671.5">sn..</text></g><g><title>to_fs_ctx (764 samples, 0.36%)</title><rect width=".359%" height="15" x="30.613%" y="645" fill="#D8A402" fg:w="764" fg:x="65076"/></g><g><title>el0_irq_naked (24 samples, 0.01%)</title><rect width=".011%" height="15" x="38.796%" y="645" fill="#DC8105" fg:w="24" fg:x="82471"/></g><g><title>gic_handle_irq (24 samples, 0.01%)</title><rect width=".011%" height="15" x="38.796%" y="629" fill="#F2110A" fg:w="24" fg:x="82471"/></g><g><title>__handle_domain_irq (24 samples, 0.01%)</title><rect width=".011%" height="15" x="38.796%" y="613" fill="#F26B00" fg:w="24" fg:x="82471"/></g><g><title>irq_exit (24 samples, 0.01%)</title><rect width=".011%" height="15" x="38.796%" y="597" fill="#FB1C1F" fg:w="24" fg:x="82471"/></g><g><title>__softirqentry_text_start (24 samples, 0.01%)</title><rect width=".011%" height="15" x="38.796%" y="581" fill="#E9DF0A" fg:w="24" fg:x="82471"/></g><g><title>dv_dma_q_get_rx_comp (37 samples, 0.02%)</title><rect width=".017%" height="15" x="48.271%" y="613" fill="#D7151B" fg:w="37" fg:x="102612"/></g><g><title>fs_virtq_clear_status (56 samples, 0.03%)</title><rect width=".026%" height="15" x="48.44%" y="581" fill="#E81715" fg:w="56" fg:x="102972"/></g><g><title>fs_virtq_rx_cb (371 samples, 0.17%)</title><rect width=".174%" height="15" x="48.293%" y="613" fill="#F40517" fg:w="371" fg:x="102659"/></g><g><title>virtq_rx_cb_common_set (363 samples, 0.17%)</title><rect width=".171%" height="15" x="48.297%" y="597" fill="#E2512E" fg:w="363" fg:x="102667"/></g><g><title>mlx5dv_get_cqe_owner (6,838 samples, 3.22%)</title><rect width="3.217%" height="15" x="49.432%" y="597" fill="#F7461E" fg:w="6838" fg:x="105080"/><text x="49.682%" y="607.5">mlx..</text></g><g><title>snap_dv_poll_cq (11,688 samples, 5.50%)</title><rect width="5.498%" height="15" x="48.468%" y="613" fill="#D44413" fg:w="11688" fg:x="103030"/><text x="48.718%" y="623.5">snap_dv..</text></g><g><title>snap_dv_get_cqe (2,800 samples, 1.32%)</title><rect width="1.317%" height="15" x="52.649%" y="597" fill="#F0BB0D" fg:w="2800" fg:x="111918"/></g><g><title>memcpy (302 samples, 0.14%)</title><rect width=".142%" height="15" x="54.012%" y="597" fill="#DF711A" fg:w="302" fg:x="114816"/></g><g><title>__GI_memcpy (302 samples, 0.14%)</title><rect width=".142%" height="15" x="54.012%" y="581" fill="#CEC002" fg:w="302" fg:x="114816"/></g><g><title>snap_dv_ring_tx_db (211 samples, 0.10%)</title><rect width=".099%" height="15" x="54.364%" y="517" fill="#F16C04" fg:w="211" fg:x="115564"/></g><g><title>snap_dv_set_comp (104 samples, 0.05%)</title><rect width=".049%" height="15" x="54.463%" y="517" fill="#F7AD31" fg:w="104" fg:x="115775"/></g><g><title>fs_virtq_sm_read_header (715 samples, 0.34%)</title><rect width=".336%" height="15" x="54.179%" y="581" fill="#E07223" fg:w="715" fg:x="115171"/></g><g><title>snap_dma_q_read (374 samples, 0.18%)</title><rect width=".176%" height="15" x="54.339%" y="565" fill="#F59F1B" fg:w="374" fg:x="115512"/></g><g><title>gga_dma_q_read (361 samples, 0.17%)</title><rect width=".17%" height="15" x="54.346%" y="549" fill="#F5AC2C" fg:w="361" fg:x="115525"/></g><g><title>do_gga_xfer (361 samples, 0.17%)</title><rect width=".17%" height="15" x="54.346%" y="533" fill="#EC170B" fg:w="361" fg:x="115525"/></g><g><title>dv_dma_q_progress_rx (20,583 samples, 9.68%)</title><rect width="9.683%" height="15" x="44.951%" y="629" fill="#CD7526" fg:w="20583" fg:x="95555"/><text x="45.201%" y="639.5">dv_dma_q_progr..</text></g><g><title>virtq_rx_cb_common_proc (1,400 samples, 0.66%)</title><rect width=".659%" height="15" x="53.975%" y="613" fill="#ED4819" fg:w="1400" fg:x="114738"/></g><g><title>virtq_cmd_progress (1,020 samples, 0.48%)</title><rect width=".48%" height="15" x="54.154%" y="597" fill="#F44609" fg:w="1020" fg:x="115118"/></g><g><title>virtq_sm_fetch_cmd_descs (252 samples, 0.12%)</title><rect width=".118%" height="15" x="54.515%" y="581" fill="#D97D27" fg:w="252" fg:x="115886"/></g><g><title>fs_virtq_proc_desc (170 samples, 0.08%)</title><rect width=".08%" height="15" x="54.554%" y="565" fill="#EB240A" fg:w="170" fg:x="115968"/></g><g><title>fs_virtq_check_fs_req_format (26 samples, 0.01%)</title><rect width=".012%" height="15" x="54.622%" y="549" fill="#FB7B2F" fg:w="26" fg:x="116112"/></g><g><title>dv_dma_q_get_comp (59 samples, 0.03%)</title><rect width=".028%" height="15" x="58.56%" y="613" fill="#DD0D0D" fg:w="59" fg:x="124483"/></g><g><title>fs_sm_dma_cb (50 samples, 0.02%)</title><rect width=".024%" height="15" x="58.594%" y="613" fill="#EE8309" fg:w="50" fg:x="124556"/></g><g><title>mlx5dv_get_cqe_owner (11,986 samples, 5.64%)</title><rect width="5.638%" height="15" x="59.604%" y="597" fill="#D33208" fg:w="11986" fg:x="126704"/><text x="59.854%" y="607.5">mlx5dv_..</text></g><g><title>snap_dv_poll_cq (17,523 samples, 8.24%)</title><rect width="8.243%" height="15" x="58.617%" y="613" fill="#F5B618" fg:w="17523" fg:x="124606"/><text x="58.867%" y="623.5">snap_dv_pol..</text></g><g><title>snap_dv_get_cqe (3,439 samples, 1.62%)</title><rect width="1.618%" height="15" x="65.243%" y="597" fill="#F20E25" fg:w="3439" fg:x="138690"/></g><g><title>fuse_ll_getattr (35 samples, 0.02%)</title><rect width=".017%" height="15" x="66.922%" y="581" fill="#F6E40C" fg:w="35" fg:x="142260"/></g><g><title>fuse_ll_read (109 samples, 0.05%)</title><rect width=".051%" height="15" x="66.939%" y="581" fill="#D5370F" fg:w="109" fg:x="142295"/></g><g><title>mpool2_alloc (80 samples, 0.04%)</title><rect width=".038%" height="15" x="67.007%" y="565" fill="#D10903" fg:w="80" fg:x="142441"/></g><g><title>ck_ring_dequeue_spsc (77 samples, 0.04%)</title><rect width=".036%" height="15" x="67.009%" y="549" fill="#E63B1E" fg:w="77" fg:x="142444"/></g><g><title>_ck_ring_dequeue_sc (77 samples, 0.04%)</title><rect width=".036%" height="15" x="67.009%" y="533" fill="#D17915" fg:w="77" fg:x="142444"/></g><g><title>memcpy (61 samples, 0.03%)</title><rect width=".029%" height="15" x="67.016%" y="517" fill="#DC6D0D" fg:w="61" fg:x="142460"/></g><g><title>nfs4_op_putfh (78 samples, 0.04%)</title><rect width=".037%" height="15" x="67.048%" y="565" fill="#E81201" fg:w="78" fg:x="142527"/></g><g><title>inode_table_get (74 samples, 0.03%)</title><rect width=".035%" height="15" x="67.05%" y="549" fill="#D7292A" fg:w="74" fg:x="142531"/></g><g><title>inode_table_hash (33 samples, 0.02%)</title><rect width=".015%" height="15" x="67.069%" y="533" fill="#E07B24" fg:w="33" fg:x="142572"/></g><g><title>__GI___libc_malloc (270 samples, 0.13%)</title><rect width=".127%" height="15" x="67.127%" y="533" fill="#F07D03" fg:w="270" fg:x="142695"/></g><g><title>_int_malloc (118 samples, 0.06%)</title><rect width=".056%" height="15" x="67.198%" y="517" fill="#CD6232" fg:w="118" fg:x="142847"/></g><g><title>__GI___pthread_mutex_lock (51 samples, 0.02%)</title><rect width=".024%" height="15" x="67.254%" y="533" fill="#CDB925" fg:w="51" fg:x="142965"/></g><g><title>__pthread_mutex_unlock_usercnt (74 samples, 0.03%)</title><rect width=".035%" height="15" x="67.279%" y="533" fill="#EECF0F" fg:w="74" fg:x="143018"/></g><g><title>libnfs_opaque_auth (137 samples, 0.06%)</title><rect width=".064%" height="15" x="67.344%" y="469" fill="#D5C72A" fg:w="137" fg:x="143156"/></g><g><title>libnfs_zdr_bytes (133 samples, 0.06%)</title><rect width=".063%" height="15" x="67.346%" y="453" fill="#EBC90B" fg:w="133" fg:x="143160"/></g><g><title>memcpy (63 samples, 0.03%)</title><rect width=".03%" height="15" x="67.379%" y="437" fill="#CF2E0B" fg:w="63" fg:x="143230"/></g><g><title>__GI_memcpy (49 samples, 0.02%)</title><rect width=".023%" height="15" x="67.385%" y="421" fill="#F12323" fg:w="49" fg:x="143244"/></g><g><title>libnfs_opaque_auth (170 samples, 0.08%)</title><rect width=".08%" height="15" x="67.333%" y="485" fill="#F3202F" fg:w="170" fg:x="143134"/></g><g><title>libnfs_rpc_msg (213 samples, 0.10%)</title><rect width=".1%" height="15" x="67.323%" y="517" fill="#F7CA17" fg:w="213" fg:x="143113"/></g><g><title>libnfs_rpc_call_body (213 samples, 0.10%)</title><rect width=".1%" height="15" x="67.323%" y="501" fill="#DB660B" fg:w="213" fg:x="143113"/></g><g><title>libnfs_zdr_u_int (22 samples, 0.01%)</title><rect width=".01%" height="15" x="67.413%" y="485" fill="#F36E2C" fg:w="22" fg:x="143304"/></g><g><title>libnfs_rpc_msg (264 samples, 0.12%)</title><rect width=".124%" height="15" x="67.314%" y="533" fill="#DE4A36" fg:w="264" fg:x="143092"/></g><g><title>libnfs_zdr_u_int (30 samples, 0.01%)</title><rect width=".014%" height="15" x="67.424%" y="517" fill="#D8630C" fg:w="30" fg:x="143326"/></g><g><title>memset (49 samples, 0.02%)</title><rect width=".023%" height="15" x="67.44%" y="533" fill="#E2161A" fg:w="49" fg:x="143361"/></g><g><title>__GI___memset_generic (47 samples, 0.02%)</title><rect width=".022%" height="15" x="67.441%" y="517" fill="#D9A30A" fg:w="47" fg:x="143363"/></g><g><title>rpc_allocate_pdu2 (799 samples, 0.38%)</title><rect width=".376%" height="15" x="67.09%" y="549" fill="#D51935" fg:w="799" fg:x="142616"/></g><g><title>__GI___pthread_mutex_lock (23 samples, 0.01%)</title><rect width=".011%" height="15" x="67.482%" y="533" fill="#FC691A" fg:w="23" fg:x="143450"/></g><g><title>__pthread_mutex_unlock_usercnt (33 samples, 0.02%)</title><rect width=".015%" height="15" x="67.493%" y="533" fill="#DC272B" fg:w="33" fg:x="143473"/></g><g><title>__GI___pthread_mutex_lock (32 samples, 0.02%)</title><rect width=".015%" height="15" x="67.533%" y="517" fill="#E54430" fg:w="32" fg:x="143558"/></g><g><title>__pthread_enable_asynccancel (35 samples, 0.02%)</title><rect width=".017%" height="15" x="67.624%" y="469" fill="#FC0820" fg:w="35" fg:x="143752"/></g><g><title>fput (24 samples, 0.01%)</title><rect width=".011%" height="15" x="67.796%" y="389" fill="#DF142B" fg:w="24" fg:x="144117"/></g><g><title>iov_iter_init (26 samples, 0.01%)</title><rect width=".012%" height="15" x="67.823%" y="389" fill="#E55131" fg:w="26" fg:x="144174"/></g><g><title>_raw_read_lock_irqsave (31 samples, 0.01%)</title><rect width=".015%" height="15" x="67.9%" y="325" fill="#EC1C24" fg:w="31" fg:x="144338"/></g><g><title>lock_sock_nested (75 samples, 0.04%)</title><rect width=".035%" height="15" x="67.882%" y="341" fill="#F9B91A" fg:w="75" fg:x="144299"/></g><g><title>_raw_read_lock_irqsave (22 samples, 0.01%)</title><rect width=".01%" height="15" x="67.926%" y="325" fill="#F9AE21" fg:w="22" fg:x="144393"/></g><g><title>_raw_spin_unlock_bh (23 samples, 0.01%)</title><rect width=".011%" height="15" x="67.937%" y="325" fill="#E9C925" fg:w="23" fg:x="144417"/></g><g><title>release_sock (79 samples, 0.04%)</title><rect width=".037%" height="15" x="67.917%" y="341" fill="#DD4E1A" fg:w="79" fg:x="144374"/></g><g><title>tcp_get_timestamping_opt_stats (23 samples, 0.01%)</title><rect width=".011%" height="15" x="67.971%" y="341" fill="#FA7F1E" fg:w="23" fg:x="144490"/></g><g><title>__check_object_size (128 samples, 0.06%)</title><rect width=".06%" height="15" x="68.13%" y="325" fill="#E6312C" fg:w="128" fg:x="144828"/></g><g><title>pfn_valid (83 samples, 0.04%)</title><rect width=".039%" height="15" x="68.151%" y="309" fill="#E54317" fg:w="83" fg:x="144873"/></g><g><title>memblock_is_map_memory (28 samples, 0.01%)</title><rect width=".013%" height="15" x="68.177%" y="293" fill="#F9532F" fg:w="28" fg:x="144928"/></g><g><title>__arch_copy_from_user (69 samples, 0.03%)</title><rect width=".033%" height="15" x="68.201%" y="309" fill="#D72B03" fg:w="69" fg:x="144979"/></g><g><title>_copy_from_iter_full (113 samples, 0.05%)</title><rect width=".053%" height="15" x="68.196%" y="325" fill="#EE9A0D" fg:w="113" fg:x="144968"/></g><g><title>iov_iter_advance (29 samples, 0.01%)</title><rect width=".014%" height="15" x="68.236%" y="309" fill="#DB3802" fg:w="29" fg:x="145052"/></g><g><title>sk_page_frag_refill (31 samples, 0.01%)</title><rect width=".015%" height="15" x="68.269%" y="325" fill="#E90004" fg:w="31" fg:x="145122"/></g><g><title>skb_page_frag_refill (27 samples, 0.01%)</title><rect width=".013%" height="15" x="68.27%" y="309" fill="#EB1E07" fg:w="27" fg:x="145126"/></g><g><title>__slab_alloc.isra.0 (54 samples, 0.03%)</title><rect width=".025%" height="15" x="68.407%" y="261" fill="#FA4F0D" fg:w="54" fg:x="145416"/></g><g><title>kmalloc_slab (26 samples, 0.01%)</title><rect width=".012%" height="15" x="68.432%" y="261" fill="#D39222" fg:w="26" fg:x="145470"/></g><g><title>memcg_kmem_put_cache (127 samples, 0.06%)</title><rect width=".06%" height="15" x="68.445%" y="261" fill="#E41626" fg:w="127" fg:x="145496"/></g><g><title>__kmalloc_node_track_caller (324 samples, 0.15%)</title><rect width=".152%" height="15" x="68.361%" y="277" fill="#EBA805" fg:w="324" fg:x="145318"/></g><g><title>memset (28 samples, 0.01%)</title><rect width=".013%" height="15" x="68.52%" y="277" fill="#DD9B10" fg:w="28" fg:x="145657"/></g><g><title>__kmalloc_reserve.isra.0 (398 samples, 0.19%)</title><rect width=".187%" height="15" x="68.355%" y="293" fill="#D7D735" fg:w="398" fg:x="145305"/></g><g><title>memcg_kmem_put_cache (104 samples, 0.05%)</title><rect width=".049%" height="15" x="68.616%" y="277" fill="#DF040A" fg:w="104" fg:x="145861"/></g><g><title>kmem_cache_alloc_node (294 samples, 0.14%)</title><rect width=".138%" height="15" x="68.547%" y="293" fill="#EA6706" fg:w="294" fg:x="145713"/></g><g><title>slab_pre_alloc_hook (40 samples, 0.02%)</title><rect width=".019%" height="15" x="68.666%" y="277" fill="#E36100" fg:w="40" fg:x="145967"/></g><g><title>ksize (47 samples, 0.02%)</title><rect width=".022%" height="15" x="68.685%" y="293" fill="#EA9635" fg:w="47" fg:x="146007"/></g><g><title>__ksize (44 samples, 0.02%)</title><rect width=".021%" height="15" x="68.686%" y="277" fill="#E4C936" fg:w="44" fg:x="146010"/></g><g><title>memset (46 samples, 0.02%)</title><rect width=".022%" height="15" x="68.716%" y="293" fill="#DE1625" fg:w="46" fg:x="146073"/></g><g><title>__alloc_skb (917 samples, 0.43%)</title><rect width=".431%" height="15" x="68.325%" y="309" fill="#ED3520" fg:w="917" fg:x="145242"/></g><g><title>slabinfo_write (37 samples, 0.02%)</title><rect width=".017%" height="15" x="68.739%" y="293" fill="#E91935" fg:w="37" fg:x="146122"/></g><g><title>sk_stream_alloc_skb (1,021 samples, 0.48%)</title><rect width=".48%" height="15" x="68.283%" y="325" fill="#D22822" fg:w="1021" fg:x="145153"/></g><g><title>skb_entail (55 samples, 0.03%)</title><rect width=".026%" height="15" x="68.763%" y="325" fill="#F1DC2C" fg:w="55" fg:x="146174"/></g><g><title>__tcp_transmit_skb (22 samples, 0.01%)</title><rect width=".01%" height="15" x="68.869%" y="277" fill="#EB1C23" fg:w="22" fg:x="146398"/></g><g><title>ktime_get (54 samples, 0.03%)</title><rect width=".025%" height="15" x="68.879%" y="277" fill="#D23811" fg:w="54" fg:x="146420"/></g><g><title>arch_counter_get_cntpct (23 samples, 0.01%)</title><rect width=".011%" height="15" x="68.894%" y="261" fill="#E0821D" fg:w="23" fg:x="146451"/></g><g><title>tcp_push (239 samples, 0.11%)</title><rect width=".112%" height="15" x="68.799%" y="325" fill="#EBD408" fg:w="239" fg:x="146250"/></g><g><title>__tcp_push_pending_frames (202 samples, 0.10%)</title><rect width=".095%" height="15" x="68.817%" y="309" fill="#DF2132" fg:w="202" fg:x="146287"/></g><g><title>tcp_write_xmit (183 samples, 0.09%)</title><rect width=".086%" height="15" x="68.826%" y="293" fill="#DB950D" fg:w="183" fg:x="146306"/></g><g><title>tcp_rate_check_app_limited (176 samples, 0.08%)</title><rect width=".083%" height="15" x="68.912%" y="325" fill="#FA9C1D" fg:w="176" fg:x="146489"/></g><g><title>ipv4_mtu (27 samples, 0.01%)</title><rect width=".013%" height="15" x="69.023%" y="293" fill="#D8C113" fg:w="27" fg:x="146726"/></g><g><title>tcp_current_mss (73 samples, 0.03%)</title><rect width=".034%" height="15" x="69.004%" y="309" fill="#D8870E" fg:w="73" fg:x="146686"/></g><g><title>tcp_send_mss (95 samples, 0.04%)</title><rect width=".045%" height="15" x="68.995%" y="325" fill="#F12F05" fg:w="95" fg:x="146665"/></g><g><title>tcp_sendmsg_locked (2,221 samples, 1.04%)</title><rect width="1.045%" height="15" x="67.995%" y="341" fill="#E92A23" fg:w="2221" fg:x="144541"/></g><g><title>tcp_stream_memory_free (24 samples, 0.01%)</title><rect width=".011%" height="15" x="69.04%" y="341" fill="#E70D06" fg:w="24" fg:x="146762"/></g><g><title>tcp_sendmsg (2,514 samples, 1.18%)</title><rect width="1.183%" height="15" x="67.872%" y="357" fill="#CFB528" fg:w="2514" fg:x="144278"/></g><g><title>inet_sendmsg (2,550 samples, 1.20%)</title><rect width="1.2%" height="15" x="67.855%" y="373" fill="#FEAD31" fg:w="2550" fg:x="144243"/></g><g><title>security_socket_sendmsg (103 samples, 0.05%)</title><rect width=".049%" height="15" x="69.055%" y="373" fill="#DD0126" fg:w="103" fg:x="146793"/></g><g><title>apparmor_socket_sendmsg (63 samples, 0.03%)</title><rect width=".03%" height="15" x="69.073%" y="357" fill="#CE7C2E" fg:w="63" fg:x="146833"/></g><g><title>aa_sk_perm (45 samples, 0.02%)</title><rect width=".021%" height="15" x="69.082%" y="341" fill="#F9150B" fg:w="45" fg:x="146851"/></g><g><title>sock_sendmsg (2,681 samples, 1.26%)</title><rect width="1.261%" height="15" x="67.843%" y="389" fill="#DEC928" fg:w="2681" fg:x="144218"/></g><g><title>__fget (48 samples, 0.02%)</title><rect width=".023%" height="15" x="69.135%" y="341" fill="#EB3D1D" fg:w="48" fg:x="146964"/></g><g><title>__rcu_read_lock (29 samples, 0.01%)</title><rect width=".014%" height="15" x="69.158%" y="341" fill="#DBCF03" fg:w="29" fg:x="147012"/></g><g><title>__fdget (158 samples, 0.07%)</title><rect width=".074%" height="15" x="69.119%" y="373" fill="#DE382E" fg:w="158" fg:x="146930"/></g><g><title>__fget_light (146 samples, 0.07%)</title><rect width=".069%" height="15" x="69.125%" y="357" fill="#EF4C36" fg:w="146" fg:x="146942"/></g><g><title>f_dupfd (44 samples, 0.02%)</title><rect width=".021%" height="15" x="69.173%" y="341" fill="#E77C1B" fg:w="44" fg:x="147044"/></g><g><title>__sys_sendto (3,036 samples, 1.43%)</title><rect width="1.428%" height="15" x="67.771%" y="405" fill="#F9C306" fg:w="3036" fg:x="144065"/></g><g><title>sockfd_lookup_light (202 samples, 0.10%)</title><rect width=".095%" height="15" x="69.105%" y="389" fill="#EDAE2F" fg:w="202" fg:x="146899"/></g><g><title>import_single_range (44 samples, 0.02%)</title><rect width=".021%" height="15" x="69.2%" y="405" fill="#CEC91F" fg:w="44" fg:x="147101"/></g><g><title>__libc_send (3,573 samples, 1.68%)</title><rect width="1.681%" height="15" x="67.553%" y="501" fill="#E73934" fg:w="3573" fg:x="143600"/></g><g><title>__libc_send (3,532 samples, 1.66%)</title><rect width="1.661%" height="15" x="67.572%" y="485" fill="#F8B116" fg:w="3532" fg:x="143641"/></g><g><title>el0_svc (3,386 samples, 1.59%)</title><rect width="1.593%" height="15" x="67.641%" y="469" fill="#D7D325" fg:w="3386" fg:x="143787"/></g><g><title>el0_svc_handler (3,386 samples, 1.59%)</title><rect width="1.593%" height="15" x="67.641%" y="453" fill="#F18033" fg:w="3386" fg:x="143787"/></g><g><title>el0_svc_common.constprop.0 (3,376 samples, 1.59%)</title><rect width="1.588%" height="15" x="67.645%" y="437" fill="#E3A51F" fg:w="3376" fg:x="143797"/></g><g><title>__arm64_sys_sendto (3,115 samples, 1.47%)</title><rect width="1.465%" height="15" x="67.768%" y="421" fill="#E4A718" fg:w="3115" fg:x="144058"/></g><g><title>sockfd_lookup_light (26 samples, 0.01%)</title><rect width=".012%" height="15" x="69.221%" y="405" fill="#E48F0C" fg:w="26" fg:x="147147"/></g><g><title>__pthread_mutex_unlock_usercnt (80 samples, 0.04%)</title><rect width=".038%" height="15" x="69.233%" y="501" fill="#F99508" fg:w="80" fg:x="147173"/></g><g><title>rpc_enqueue (82 samples, 0.04%)</title><rect width=".039%" height="15" x="69.271%" y="501" fill="#F3232C" fg:w="82" fg:x="147253"/></g><g><title>rpc_queue_pdu (3,922 samples, 1.84%)</title><rect width="1.845%" height="15" x="67.466%" y="549" fill="#F65909" fg:w="3922" fg:x="143415"/><text x="67.716%" y="559.5">r..</text></g><g><title>rpc_write_to_socket (3,816 samples, 1.80%)</title><rect width="1.795%" height="15" x="67.516%" y="533" fill="#E9D50D" fg:w="3816" fg:x="143521"/><text x="67.766%" y="543.5">r..</text></g><g><title>rpc_write_to_socket (3,746 samples, 1.76%)</title><rect width="1.762%" height="15" x="67.548%" y="517" fill="#E98D29" fg:w="3746" fg:x="143591"/></g><g><title>zdr_GETATTR4args (70 samples, 0.03%)</title><rect width=".033%" height="15" x="69.388%" y="485" fill="#EFA704" fg:w="70" fg:x="147502"/></g><g><title>zdr_bitmap4 (57 samples, 0.03%)</title><rect width=".027%" height="15" x="69.394%" y="469" fill="#D1D910" fg:w="57" fg:x="147515"/></g><g><title>libnfs_zdr_array (39 samples, 0.02%)</title><rect width=".018%" height="15" x="69.403%" y="453" fill="#DB5823" fg:w="39" fg:x="147533"/></g><g><title>libnfs_zdr_u_int (22 samples, 0.01%)</title><rect width=".01%" height="15" x="69.411%" y="437" fill="#DCC117" fg:w="22" fg:x="147550"/></g><g><title>zdr_nfs_argop4 (184 samples, 0.09%)</title><rect width=".087%" height="15" x="69.368%" y="501" fill="#E65A34" fg:w="184" fg:x="147458"/></g><g><title>zdr_PUTFH4args (70 samples, 0.03%)</title><rect width=".033%" height="15" x="69.421%" y="485" fill="#FC6A13" fg:w="70" fg:x="147572"/></g><g><title>zdr_nfs_fh4 (48 samples, 0.02%)</title><rect width=".023%" height="15" x="69.431%" y="469" fill="#CE4A14" fg:w="48" fg:x="147594"/></g><g><title>libnfs_zdr_bytes (46 samples, 0.02%)</title><rect width=".022%" height="15" x="69.432%" y="453" fill="#E68A2C" fg:w="46" fg:x="147596"/></g><g><title>libnfs_zdr_array (351 samples, 0.17%)</title><rect width=".165%" height="15" x="69.319%" y="533" fill="#EBB62B" fg:w="351" fg:x="147354"/></g><g><title>zdr_nfs_argop4 (304 samples, 0.14%)</title><rect width=".143%" height="15" x="69.341%" y="517" fill="#F21033" fg:w="304" fg:x="147401"/></g><g><title>zdr_nfs_opnum4 (63 samples, 0.03%)</title><rect width=".03%" height="15" x="69.454%" y="501" fill="#F80904" fg:w="63" fg:x="147642"/></g><g><title>libnfs_zdr_enum (57 samples, 0.03%)</title><rect width=".027%" height="15" x="69.457%" y="485" fill="#D21F16" fg:w="57" fg:x="147648"/></g><g><title>zdr_utf8str_cis (77 samples, 0.04%)</title><rect width=".036%" height="15" x="69.486%" y="533" fill="#EF3627" fg:w="77" fg:x="147710"/></g><g><title>zdr_utf8string (69 samples, 0.03%)</title><rect width=".033%" height="15" x="69.49%" y="517" fill="#E66329" fg:w="69" fg:x="147718"/></g><g><title>libnfs_zdr_bytes (58 samples, 0.03%)</title><rect width=".027%" height="15" x="69.495%" y="501" fill="#FD6A0C" fg:w="58" fg:x="147729"/></g><g><title>memcpy (32 samples, 0.02%)</title><rect width=".015%" height="15" x="69.507%" y="485" fill="#D52E29" fg:w="32" fg:x="147755"/></g><g><title>__GI_memcpy (32 samples, 0.02%)</title><rect width=".015%" height="15" x="69.507%" y="469" fill="#D78523" fg:w="32" fg:x="147755"/></g><g><title>getattr (5,407 samples, 2.54%)</title><rect width="2.544%" height="15" x="66.99%" y="581" fill="#D51C05" fg:w="5407" fg:x="142404"/><text x="67.24%" y="591.5">ge..</text></g><g><title>rpc_nfs4_compound_async2 (5,204 samples, 2.45%)</title><rect width="2.448%" height="15" x="67.085%" y="565" fill="#D74D31" fg:w="5204" fg:x="142607"/><text x="67.335%" y="575.5">rp..</text></g><g><title>zdr_COMPOUND4args (474 samples, 0.22%)</title><rect width=".223%" height="15" x="69.311%" y="549" fill="#F86416" fg:w="474" fg:x="147337"/></g><g><title>zdr_utf8str_cs (24 samples, 0.01%)</title><rect width=".011%" height="15" x="69.522%" y="533" fill="#D04309" fg:w="24" fg:x="147787"/></g><g><title>set_iovecs (90 samples, 0.04%)</title><rect width=".042%" height="15" x="69.534%" y="581" fill="#DB8515" fg:w="90" fg:x="147811"/></g><g><title>virtio_fs_ctrl_fs_dev_handle_req (38 samples, 0.02%)</title><rect width=".018%" height="15" x="69.576%" y="581" fill="#F62E1D" fg:w="38" fg:x="147901"/></g><g><title>virtiofs_emu_ll_handle_fuse_req (284 samples, 0.13%)</title><rect width=".134%" height="15" x="69.594%" y="581" fill="#F6B934" fg:w="284" fg:x="147939"/></g><g><title>ck_pr_md_load_uint (75 samples, 0.04%)</title><rect width=".035%" height="15" x="69.742%" y="517" fill="#FC880B" fg:w="75" fg:x="148253"/></g><g><title>mpool2_alloc (89 samples, 0.04%)</title><rect width=".042%" height="15" x="69.738%" y="565" fill="#DB8A35" fg:w="89" fg:x="148245"/></g><g><title>ck_ring_dequeue_spsc (88 samples, 0.04%)</title><rect width=".041%" height="15" x="69.738%" y="549" fill="#D33317" fg:w="88" fg:x="148246"/></g><g><title>_ck_ring_dequeue_sc (88 samples, 0.04%)</title><rect width=".041%" height="15" x="69.738%" y="533" fill="#F7DD1C" fg:w="88" fg:x="148246"/></g><g><title>nfs4_op_putfh_open (118 samples, 0.06%)</title><rect width=".056%" height="15" x="69.78%" y="565" fill="#FBDE2D" fg:w="118" fg:x="148334"/></g><g><title>inode_table_get (115 samples, 0.05%)</title><rect width=".054%" height="15" x="69.781%" y="549" fill="#D9A235" fg:w="115" fg:x="148337"/></g><g><title>__GI___libc_malloc (657 samples, 0.31%)</title><rect width=".309%" height="15" x="69.933%" y="533" fill="#E55D0E" fg:w="657" fg:x="148659"/></g><g><title>_int_malloc (351 samples, 0.17%)</title><rect width=".165%" height="15" x="70.076%" y="517" fill="#D14331" fg:w="351" fg:x="148965"/></g><g><title>__GI___pthread_mutex_lock (201 samples, 0.09%)</title><rect width=".095%" height="15" x="70.242%" y="533" fill="#D5571D" fg:w="201" fg:x="149316"/></g><g><title>__pthread_mutex_unlock_usercnt (77 samples, 0.04%)</title><rect width=".036%" height="15" x="70.337%" y="533" fill="#CD9734" fg:w="77" fg:x="149519"/></g><g><title>libnfs_opaque_auth (72 samples, 0.03%)</title><rect width=".034%" height="15" x="70.392%" y="469" fill="#FDD727" fg:w="72" fg:x="149636"/></g><g><title>libnfs_zdr_bytes (70 samples, 0.03%)</title><rect width=".033%" height="15" x="70.393%" y="453" fill="#DDDC29" fg:w="70" fg:x="149638"/></g><g><title>memcpy (31 samples, 0.01%)</title><rect width=".015%" height="15" x="70.411%" y="437" fill="#DA8515" fg:w="31" fg:x="149677"/></g><g><title>__GI_memcpy (27 samples, 0.01%)</title><rect width=".013%" height="15" x="70.413%" y="421" fill="#DDC12B" fg:w="27" fg:x="149681"/></g><g><title>libnfs_opaque_auth (86 samples, 0.04%)</title><rect width=".041%" height="15" x="70.389%" y="485" fill="#F08034" fg:w="86" fg:x="149630"/></g><g><title>libnfs_rpc_msg (116 samples, 0.05%)</title><rect width=".055%" height="15" x="70.381%" y="517" fill="#FD720C" fg:w="116" fg:x="149612"/></g><g><title>libnfs_rpc_call_body (116 samples, 0.05%)</title><rect width=".055%" height="15" x="70.381%" y="501" fill="#D7DF2F" fg:w="116" fg:x="149612"/></g><g><title>libnfs_rpc_msg (145 samples, 0.07%)</title><rect width=".068%" height="15" x="70.374%" y="533" fill="#F8E117" fg:w="145" fg:x="149597"/></g><g><title>rpc_allocate_pdu2 (1,303 samples, 0.61%)</title><rect width=".613%" height="15" x="69.844%" y="549" fill="#FA6C00" fg:w="1303" fg:x="148471"/></g><g><title>__GI___pthread_mutex_lock (30 samples, 0.01%)</title><rect width=".014%" height="15" x="70.482%" y="533" fill="#E4D007" fg:w="30" fg:x="149827"/></g><g><title>__GI___pthread_mutex_lock (25 samples, 0.01%)</title><rect width=".012%" height="15" x="70.522%" y="517" fill="#F42D0A" fg:w="25" fg:x="149911"/></g><g><title>__pthread_disable_asynccancel (34 samples, 0.02%)</title><rect width=".016%" height="15" x="70.614%" y="469" fill="#CF7D19" fg:w="34" fg:x="150107"/></g><g><title>__pthread_enable_asynccancel (45 samples, 0.02%)</title><rect width=".021%" height="15" x="70.63%" y="469" fill="#D2C312" fg:w="45" fg:x="150141"/></g><g><title>fput (36 samples, 0.02%)</title><rect width=".017%" height="15" x="70.773%" y="373" fill="#F9500C" fg:w="36" fg:x="150446"/></g><g><title>fput (52 samples, 0.02%)</title><rect width=".025%" height="15" x="70.772%" y="389" fill="#DD4109" fg:w="52" fg:x="150444"/></g><g><title>_raw_read_lock_irqsave (122 samples, 0.06%)</title><rect width=".057%" height="15" x="70.9%" y="325" fill="#EB3124" fg:w="122" fg:x="150716"/></g><g><title>lock_sock_nested (170 samples, 0.08%)</title><rect width=".08%" height="15" x="70.881%" y="341" fill="#E12014" fg:w="170" fg:x="150675"/></g><g><title>release_sock (94 samples, 0.04%)</title><rect width=".044%" height="15" x="70.961%" y="341" fill="#D78D2E" fg:w="94" fg:x="150845"/></g><g><title>tcp_release_cb (24 samples, 0.01%)</title><rect width=".011%" height="15" x="70.994%" y="325" fill="#FAA02F" fg:w="24" fg:x="150915"/></g><g><title>tcp_get_timestamping_opt_stats (158 samples, 0.07%)</title><rect width=".074%" height="15" x="71.015%" y="341" fill="#D8DE28" fg:w="158" fg:x="150961"/></g><g><title>__check_object_size (48 samples, 0.02%)</title><rect width=".023%" height="15" x="71.229%" y="325" fill="#EAD927" fg:w="48" fg:x="151415"/></g><g><title>pfn_valid (30 samples, 0.01%)</title><rect width=".014%" height="15" x="71.237%" y="309" fill="#CFB228" fg:w="30" fg:x="151433"/></g><g><title>__arch_copy_from_user (23 samples, 0.01%)</title><rect width=".011%" height="15" x="71.263%" y="309" fill="#DD880D" fg:w="23" fg:x="151488"/></g><g><title>_copy_from_iter_full (68 samples, 0.03%)</title><rect width=".032%" height="15" x="71.252%" y="325" fill="#F9C70A" fg:w="68" fg:x="151464"/></g><g><title>sk_page_frag_refill (166 samples, 0.08%)</title><rect width=".078%" height="15" x="71.297%" y="325" fill="#F9DE0D" fg:w="166" fg:x="151560"/></g><g><title>skb_page_frag_refill (165 samples, 0.08%)</title><rect width=".078%" height="15" x="71.298%" y="309" fill="#F4B926" fg:w="165" fg:x="151561"/></g><g><title>kmalloc_slab (34 samples, 0.02%)</title><rect width=".016%" height="15" x="71.466%" y="261" fill="#ECCA09" fg:w="34" fg:x="151920"/></g><g><title>memcg_kmem_put_cache (136 samples, 0.06%)</title><rect width=".064%" height="15" x="71.483%" y="261" fill="#FAE525" fg:w="136" fg:x="151954"/></g><g><title>__kmalloc_node_track_caller (307 samples, 0.14%)</title><rect width=".144%" height="15" x="71.407%" y="277" fill="#CEAE17" fg:w="307" fg:x="151794"/></g><g><title>__kmalloc_reserve.isra.0 (359 samples, 0.17%)</title><rect width=".169%" height="15" x="71.405%" y="293" fill="#D3212B" fg:w="359" fg:x="151789"/></g><g><title>slabinfo_write (25 samples, 0.01%)</title><rect width=".012%" height="15" x="71.562%" y="277" fill="#F53A32" fg:w="25" fg:x="152123"/></g><g><title>__slab_alloc.isra.0 (27 samples, 0.01%)</title><rect width=".013%" height="15" x="71.626%" y="277" fill="#F44424" fg:w="27" fg:x="152260"/></g><g><title>memcg_kmem_put_cache (90 samples, 0.04%)</title><rect width=".042%" height="15" x="71.64%" y="277" fill="#E8E50F" fg:w="90" fg:x="152288"/></g><g><title>kmem_cache_alloc_node (252 samples, 0.12%)</title><rect width=".118%" height="15" x="71.578%" y="293" fill="#FE1E17" fg:w="252" fg:x="152156"/></g><g><title>slab_pre_alloc_hook (30 samples, 0.01%)</title><rect width=".014%" height="15" x="71.682%" y="277" fill="#EBA00E" fg:w="30" fg:x="152378"/></g><g><title>ksize (155 samples, 0.07%)</title><rect width=".073%" height="15" x="71.696%" y="293" fill="#D49B2C" fg:w="155" fg:x="152408"/></g><g><title>__ksize (155 samples, 0.07%)</title><rect width=".073%" height="15" x="71.696%" y="277" fill="#E20232" fg:w="155" fg:x="152408"/></g><g><title>memset (56 samples, 0.03%)</title><rect width=".026%" height="15" x="71.776%" y="293" fill="#EAB106" fg:w="56" fg:x="152579"/></g><g><title>__alloc_skb (916 samples, 0.43%)</title><rect width=".431%" height="15" x="71.388%" y="309" fill="#D91809" fg:w="916" fg:x="151753"/></g><g><title>slabinfo_write (31 samples, 0.01%)</title><rect width=".015%" height="15" x="71.804%" y="293" fill="#DC0D2E" fg:w="31" fg:x="152638"/></g><g><title>sk_stream_alloc_skb (959 samples, 0.45%)</title><rect width=".451%" height="15" x="71.375%" y="325" fill="#EFDD1B" fg:w="959" fg:x="151726"/></g><g><title>skb_entail (66 samples, 0.03%)</title><rect width=".031%" height="15" x="71.826%" y="325" fill="#DEC619" fg:w="66" fg:x="152685"/></g><g><title>__tcp_select_window (141 samples, 0.07%)</title><rect width=".066%" height="15" x="72.159%" y="261" fill="#D3630D" fg:w="141" fg:x="153392"/></g><g><title>__sk_dst_check (44 samples, 0.02%)</title><rect width=".021%" height="15" x="72.322%" y="229" fill="#E86F1F" fg:w="44" fg:x="153739"/></g><g><title>iptable_filter_hook (47 samples, 0.02%)</title><rect width=".022%" height="15" x="72.377%" y="197" fill="#F55225" fg:w="47" fg:x="153856"/></g><g><title>iptable_mangle_hook (27 samples, 0.01%)</title><rect width=".013%" height="15" x="72.399%" y="197" fill="#E3952E" fg:w="27" fg:x="153903"/></g><g><title>comment_mt (33 samples, 0.02%)</title><rect width=".015%" height="15" x="72.473%" y="165" fill="#DA2432" fg:w="33" fg:x="154060"/></g><g><title>__local_bh_enable_ip (29 samples, 0.01%)</title><rect width=".014%" height="15" x="72.657%" y="149" fill="#E25030" fg:w="29" fg:x="154451"/></g><g><title>ipt_do_table (392 samples, 0.18%)</title><rect width=".184%" height="15" x="72.489%" y="165" fill="#EEE00F" fg:w="392" fg:x="154093"/></g><g><title>iptable_filter_hook (447 samples, 0.21%)</title><rect width=".21%" height="15" x="72.471%" y="181" fill="#F1880A" fg:w="447" fg:x="154056"/></g><g><title>iptable_mangle_hook (275 samples, 0.13%)</title><rect width=".129%" height="15" x="72.682%" y="181" fill="#D0202D" fg:w="275" fg:x="154503"/></g><g><title>ipt_do_table (225 samples, 0.11%)</title><rect width=".106%" height="15" x="72.705%" y="165" fill="#CF8709" fg:w="225" fg:x="154553"/></g><g><title>ipv4_conntrack_defrag (24 samples, 0.01%)</title><rect width=".011%" height="15" x="72.811%" y="181" fill="#CE562C" fg:w="24" fg:x="154778"/></g><g><title>__nf_conntrack_find_get (224 samples, 0.11%)</title><rect width=".105%" height="15" x="72.908%" y="149" fill="#F5B10F" fg:w="224" fg:x="154984"/></g><g><title>get_l4proto (74 samples, 0.03%)</title><rect width=".035%" height="15" x="73.024%" y="149" fill="#CE4032" fg:w="74" fg:x="155231"/></g><g><title>hash_conntrack_raw (57 samples, 0.03%)</title><rect width=".027%" height="15" x="73.059%" y="149" fill="#EA2428" fg:w="57" fg:x="155305"/></g><g><title>nf_conntrack_init_net (171 samples, 0.08%)</title><rect width=".08%" height="15" x="73.086%" y="149" fill="#D54008" fg:w="171" fg:x="155362"/></g><g><title>__nf_ct_refresh_acct (30 samples, 0.01%)</title><rect width=".014%" height="15" x="73.308%" y="133" fill="#D24B24" fg:w="30" fg:x="155834"/></g><g><title>_raw_spin_unlock_bh (41 samples, 0.02%)</title><rect width=".019%" height="15" x="73.329%" y="133" fill="#E55815" fg:w="41" fg:x="155880"/></g><g><title>__local_bh_enable_ip (36 samples, 0.02%)</title><rect width=".017%" height="15" x="73.332%" y="117" fill="#FCCC2F" fg:w="36" fg:x="155885"/></g><g><title>nf_conntrack_tcp_packet (641 samples, 0.30%)</title><rect width=".301%" height="15" x="73.166%" y="149" fill="#D04D1B" fg:w="641" fg:x="155533"/></g><g><title>tcp_in_window (247 samples, 0.12%)</title><rect width=".116%" height="15" x="73.352%" y="133" fill="#DD4C1A" fg:w="247" fg:x="155927"/></g><g><title>nf_ct_seq_offset (25 samples, 0.01%)</title><rect width=".012%" height="15" x="73.456%" y="117" fill="#E18B12" fg:w="25" fg:x="156149"/></g><g><title>nf_ct_get_tuple (123 samples, 0.06%)</title><rect width=".058%" height="15" x="73.468%" y="149" fill="#E6890B" fg:w="123" fg:x="156174"/></g><g><title>nf_conntrack_in (1,464 samples, 0.69%)</title><rect width=".689%" height="15" x="72.844%" y="165" fill="#D41C01" fg:w="1464" fg:x="154848"/></g><g><title>ipv4_conntrack_local (1,535 samples, 0.72%)</title><rect width=".722%" height="15" x="72.822%" y="181" fill="#F8A411" fg:w="1535" fg:x="154802"/></g><g><title>nf_ct_get_tuple (23 samples, 0.01%)</title><rect width=".011%" height="15" x="73.534%" y="165" fill="#DEAB2A" fg:w="23" fg:x="156314"/></g><g><title>nf_nat_inet_fn (37 samples, 0.02%)</title><rect width=".017%" height="15" x="73.59%" y="149" fill="#F3542D" fg:w="37" fg:x="156433"/></g><g><title>nf_hook_slow (2,524 samples, 1.19%)</title><rect width="1.187%" height="15" x="72.429%" y="197" fill="#FC3117" fg:w="2524" fg:x="153966"/></g><g><title>nf_nat_ipv4_local_fn (123 samples, 0.06%)</title><rect width=".058%" height="15" x="73.558%" y="181" fill="#D71307" fg:w="123" fg:x="156367"/></g><g><title>nf_nat_ipv4_fn (67 samples, 0.03%)</title><rect width=".032%" height="15" x="73.585%" y="165" fill="#EE5129" fg:w="67" fg:x="156423"/></g><g><title>__ip_local_out (2,714 samples, 1.28%)</title><rect width="1.277%" height="15" x="72.353%" y="213" fill="#D2C725" fg:w="2714" fg:x="153805"/></g><g><title>nf_nat_ipv4_local_fn (29 samples, 0.01%)</title><rect width=".014%" height="15" x="73.616%" y="197" fill="#F4C031" fg:w="29" fg:x="156490"/></g><g><title>__cgroup_bpf_run_filter_skb (134 samples, 0.06%)</title><rect width=".063%" height="15" x="73.709%" y="181" fill="#E2D30B" fg:w="134" fg:x="156687"/></g><g><title>__qdisc_run (60 samples, 0.03%)</title><rect width=".028%" height="15" x="74.063%" y="117" fill="#ECA236" fg:w="60" fg:x="157439"/></g><g><title>fq_codel_dequeue (24 samples, 0.01%)</title><rect width=".011%" height="15" x="74.08%" y="101" fill="#DCE509" fg:w="24" fg:x="157475"/></g><g><title>_raw_read_lock_irqsave (191 samples, 0.09%)</title><rect width=".09%" height="15" x="74.091%" y="117" fill="#FA5716" fg:w="191" fg:x="157499"/></g><g><title>mlx5e_select_queue (33 samples, 0.02%)</title><rect width=".015%" height="15" x="74.197%" y="117" fill="#EF2B11" fg:w="33" fg:x="157724"/></g><g><title>__get_xps_queue_idx (64 samples, 0.03%)</title><rect width=".03%" height="15" x="74.29%" y="69" fill="#E7B119" fg:w="64" fg:x="157923"/></g><g><title>mlx5e_select_queue (180 samples, 0.08%)</title><rect width=".085%" height="15" x="74.239%" y="101" fill="#DBB301" fg:w="180" fg:x="157814"/></g><g><title>netdev_pick_tx (104 samples, 0.05%)</title><rect width=".049%" height="15" x="74.275%" y="85" fill="#EEDB35" fg:w="104" fg:x="157890"/></g><g><title>netdev_core_pick_tx (242 samples, 0.11%)</title><rect width=".114%" height="15" x="74.212%" y="117" fill="#E8A724" fg:w="242" fg:x="157757"/></g><g><title>__lock_text_start (172 samples, 0.08%)</title><rect width=".081%" height="15" x="74.344%" y="101" fill="#F41333" fg:w="172" fg:x="158036"/></g><g><title>_raw_read_lock_irqsave (174 samples, 0.08%)</title><rect width=".082%" height="15" x="74.425%" y="101" fill="#E00616" fg:w="174" fg:x="158208"/></g><g><title>mlx5e_sq_xmit_prepare (163 samples, 0.08%)</title><rect width=".077%" height="15" x="74.619%" y="69" fill="#E09105" fg:w="163" fg:x="158622"/></g><g><title>mlx5e_tx_check_stop (136 samples, 0.06%)</title><rect width=".064%" height="15" x="74.906%" y="53" fill="#EA8231" fg:w="136" fg:x="159231"/></g><g><title>mlx5e_sq_xmit_wqe (755 samples, 0.36%)</title><rect width=".355%" height="15" x="74.696%" y="69" fill="#FE0602" fg:w="755" fg:x="158785"/></g><g><title>mlx5e_txwqe_build_dsegs (173 samples, 0.08%)</title><rect width=".081%" height="15" x="74.97%" y="53" fill="#D0602E" fg:w="173" fg:x="159367"/></g><g><title>dma_direct_map_page (80 samples, 0.04%)</title><rect width=".038%" height="15" x="75.013%" y="37" fill="#EF0327" fg:w="80" fg:x="159460"/></g><g><title>dev_hard_start_xmit (1,184 samples, 0.56%)</title><rect width=".557%" height="15" x="74.512%" y="101" fill="#E9D201" fg:w="1184" fg:x="158394"/></g><g><title>mlx5e_xmit (1,097 samples, 0.52%)</title><rect width=".516%" height="15" x="74.553%" y="85" fill="#F48925" fg:w="1097" fg:x="158481"/></g><g><title>netif_skb_features (74 samples, 0.03%)</title><rect width=".035%" height="15" x="75.154%" y="69" fill="#F08802" fg:w="74" fg:x="159758"/></g><g><title>validate_xmit_skb (244 samples, 0.11%)</title><rect width=".115%" height="15" x="75.094%" y="85" fill="#EF1225" fg:w="244" fg:x="159630"/></g><g><title>validate_xmit_xfrm (36 samples, 0.02%)</title><rect width=".017%" height="15" x="75.191%" y="69" fill="#DAB916" fg:w="36" fg:x="159838"/></g><g><title>sch_direct_xmit (1,905 samples, 0.90%)</title><rect width=".896%" height="15" x="74.326%" y="117" fill="#E1DA04" fg:w="1905" fg:x="157999"/></g><g><title>validate_xmit_skb_list (307 samples, 0.14%)</title><rect width=".144%" height="15" x="75.078%" y="101" fill="#E6B620" fg:w="307" fg:x="159597"/></g><g><title>validate_xmit_xfrm (30 samples, 0.01%)</title><rect width=".014%" height="15" x="75.208%" y="85" fill="#F2382B" fg:w="30" fg:x="159874"/></g><g><title>__dev_queue_xmit (2,814 samples, 1.32%)</title><rect width="1.324%" height="15" x="73.9%" y="133" fill="#E96318" fg:w="2814" fg:x="157093"/></g><g><title>dev_queue_xmit (2,837 samples, 1.33%)</title><rect width="1.335%" height="15" x="73.899%" y="149" fill="#EAD12A" fg:w="2837" fg:x="157090"/></g><g><title>ip_finish_output2 (3,054 samples, 1.44%)</title><rect width="1.437%" height="15" x="73.797%" y="165" fill="#E3070C" fg:w="3054" fg:x="156874"/></g><g><title>__ip_finish_output (3,111 samples, 1.46%)</title><rect width="1.464%" height="15" x="73.772%" y="181" fill="#F5CB2B" fg:w="3111" fg:x="156821"/></g><g><title>ip_finish_output (3,278 samples, 1.54%)</title><rect width="1.542%" height="15" x="73.697%" y="197" fill="#EECD21" fg:w="3278" fg:x="156662"/></g><g><title>ipv4_confirm (23 samples, 0.01%)</title><rect width=".011%" height="15" x="75.243%" y="197" fill="#E73807" fg:w="23" fg:x="159948"/></g><g><title>iptable_mangle_hook (95 samples, 0.04%)</title><rect width=".045%" height="15" x="75.276%" y="181" fill="#F4BA1D" fg:w="95" fg:x="160018"/></g><g><title>ipt_do_table (88 samples, 0.04%)</title><rect width=".041%" height="15" x="75.279%" y="165" fill="#EA6F1F" fg:w="88" fg:x="160025"/></g><g><title>__local_bh_enable_ip (25 samples, 0.01%)</title><rect width=".012%" height="15" x="75.309%" y="149" fill="#F1950A" fg:w="25" fg:x="160088"/></g><g><title>nf_confirm (55 samples, 0.03%)</title><rect width=".026%" height="15" x="75.326%" y="165" fill="#F9CE2C" fg:w="55" fg:x="160124"/></g><g><title>nf_ct_deliver_cached_events (24 samples, 0.01%)</title><rect width=".011%" height="15" x="75.341%" y="149" fill="#FB991E" fg:w="24" fg:x="160155"/></g><g><title>ipv4_confirm (76 samples, 0.04%)</title><rect width=".036%" height="15" x="75.321%" y="181" fill="#EF9826" fg:w="76" fg:x="160113"/></g><g><title>nf_hook_slow (258 samples, 0.12%)</title><rect width=".121%" height="15" x="75.254%" y="197" fill="#F98B2F" fg:w="258" fg:x="159971"/></g><g><title>nf_nat_ipv4_out (25 samples, 0.01%)</title><rect width=".012%" height="15" x="75.364%" y="181" fill="#F44023" fg:w="25" fg:x="160204"/></g><g><title>ip_output (3,704 samples, 1.74%)</title><rect width="1.742%" height="15" x="73.637%" y="213" fill="#D82E0F" fg:w="3704" fg:x="156533"/></g><g><title>ip_local_out (6,469 samples, 3.04%)</title><rect width="3.043%" height="15" x="72.343%" y="229" fill="#FA4A13" fg:w="6469" fg:x="153784"/><text x="72.593%" y="239.5">ip_..</text></g><g><title>__ip_queue_xmit (6,722 samples, 3.16%)</title><rect width="3.162%" height="15" x="72.241%" y="245" fill="#F92A21" fg:w="6722" fg:x="153567"/><text x="72.491%" y="255.5">__i..</text></g><g><title>__sk_dst_check (24 samples, 0.01%)</title><rect width=".011%" height="15" x="75.406%" y="245" fill="#F29511" fg:w="24" fg:x="160294"/></g><g><title>ip_queue_xmit (6,773 samples, 3.19%)</title><rect width="3.186%" height="15" x="72.239%" y="261" fill="#F41D15" fg:w="6773" fg:x="153561"/><text x="72.489%" y="271.5">ip_..</text></g><g><title>refcount_add_not_zero_checked (40 samples, 0.02%)</title><rect width=".019%" height="15" x="75.425%" y="261" fill="#DC8225" fg:w="40" fg:x="160334"/></g><g><title>refcount_dec_and_mutex_lock (34 samples, 0.02%)</title><rect width=".016%" height="15" x="75.444%" y="261" fill="#D34302" fg:w="34" fg:x="160374"/></g><g><title>skb_clone (81 samples, 0.04%)</title><rect width=".038%" height="15" x="75.46%" y="261" fill="#EB4434" fg:w="81" fg:x="160408"/></g><g><title>__copy_skb_header (31 samples, 0.01%)</title><rect width=".015%" height="15" x="75.483%" y="245" fill="#F68E03" fg:w="31" fg:x="160458"/></g><g><title>skb_segment (27 samples, 0.01%)</title><rect width=".013%" height="15" x="75.502%" y="261" fill="#F11907" fg:w="27" fg:x="160498"/></g><g><title>tcp_options_write (33 samples, 0.02%)</title><rect width=".015%" height="15" x="75.52%" y="261" fill="#F27727" fg:w="33" fg:x="160536"/></g><g><title>tcp_update_skb_after_send (33 samples, 0.02%)</title><rect width=".015%" height="15" x="75.543%" y="261" fill="#F1622D" fg:w="33" fg:x="160586"/></g><g><title>__tcp_transmit_skb (7,532 samples, 3.54%)</title><rect width="3.543%" height="15" x="72.025%" y="277" fill="#FE1C1E" fg:w="7532" fg:x="153107"/><text x="72.275%" y="287.5">__tc..</text></g><g><title>arch_counter_get_cntpct (25 samples, 0.01%)</title><rect width=".012%" height="15" x="75.614%" y="261" fill="#F18E36" fg:w="25" fg:x="160736"/></g><g><title>ktime_get (69 samples, 0.03%)</title><rect width=".033%" height="15" x="75.595%" y="277" fill="#DE550F" fg:w="69" fg:x="160697"/></g><g><title>rb_insert_color (35 samples, 0.02%)</title><rect width=".017%" height="15" x="75.731%" y="261" fill="#D2552F" fg:w="35" fg:x="160985"/></g><g><title>tcp_rbtree_insert (23 samples, 0.01%)</title><rect width=".011%" height="15" x="75.748%" y="261" fill="#E0CE19" fg:w="23" fg:x="161022"/></g><g><title>tcp_event_new_data_sent (394 samples, 0.19%)</title><rect width=".185%" height="15" x="75.656%" y="277" fill="#F3C913" fg:w="394" fg:x="160826"/></g><g><title>tcp_rearm_rto (175 samples, 0.08%)</title><rect width=".082%" height="15" x="75.759%" y="261" fill="#EC3B04" fg:w="175" fg:x="161045"/></g><g><title>sk_reset_timer (159 samples, 0.07%)</title><rect width=".075%" height="15" x="75.767%" y="245" fill="#FEB32D" fg:w="159" fg:x="161061"/></g><g><title>mod_timer (155 samples, 0.07%)</title><rect width=".073%" height="15" x="75.769%" y="229" fill="#E20E0A" fg:w="155" fg:x="161065"/></g><g><title>tcp_schedule_loss_probe (102 samples, 0.05%)</title><rect width=".048%" height="15" x="75.868%" y="277" fill="#F41B29" fg:w="102" fg:x="161277"/></g><g><title>tcp_small_queue_check.isra.0 (28 samples, 0.01%)</title><rect width=".013%" height="15" x="75.916%" y="277" fill="#EB2320" fg:w="28" fg:x="161379"/></g><g><title>__tcp_push_pending_frames (8,608 samples, 4.05%)</title><rect width="4.049%" height="15" x="71.89%" y="309" fill="#DA441F" fg:w="8608" fg:x="152820"/><text x="72.14%" y="319.5">__tc..</text></g><g><title>tcp_write_xmit (8,542 samples, 4.02%)</title><rect width="4.018%" height="15" x="71.921%" y="293" fill="#CF7825" fg:w="8542" fg:x="152886"/><text x="72.171%" y="303.5">tcp_..</text></g><g><title>tcp_push (8,658 samples, 4.07%)</title><rect width="4.073%" height="15" x="71.872%" y="325" fill="#E36200" fg:w="8658" fg:x="152781"/><text x="72.122%" y="335.5">tcp_..</text></g><g><title>tcp_rate_check_app_limited (124 samples, 0.06%)</title><rect width=".058%" height="15" x="75.945%" y="325" fill="#CF0703" fg:w="124" fg:x="161439"/></g><g><title>ipv4_mtu (28 samples, 0.01%)</title><rect width=".013%" height="15" x="76.144%" y="293" fill="#CE6213" fg:w="28" fg:x="161862"/></g><g><title>tcp_send_mss (332 samples, 0.16%)</title><rect width=".156%" height="15" x="76.003%" y="325" fill="#D9051A" fg:w="332" fg:x="161563"/></g><g><title>tcp_current_mss (205 samples, 0.10%)</title><rect width=".096%" height="15" x="76.063%" y="309" fill="#EBBE26" fg:w="205" fg:x="161690"/></g><g><title>tcp_sendmsg_locked (10,756 samples, 5.06%)</title><rect width="5.06%" height="15" x="71.1%" y="341" fill="#F75618" fg:w="10756" fg:x="151140"/><text x="71.35%" y="351.5">tcp_se..</text></g><g><title>tcp_sendmsg (11,280 samples, 5.31%)</title><rect width="5.306%" height="15" x="70.857%" y="357" fill="#CD6510" fg:w="11280" fg:x="150625"/><text x="71.107%" y="367.5">tcp_se..</text></g><g><title>inet_sendmsg (11,333 samples, 5.33%)</title><rect width="5.331%" height="15" x="70.833%" y="373" fill="#F6A821" fg:w="11333" fg:x="150574"/><text x="71.083%" y="383.5">inet_se..</text></g><g><title>security_socket_sendmsg (96 samples, 0.05%)</title><rect width=".045%" height="15" x="76.165%" y="373" fill="#E77201" fg:w="96" fg:x="161907"/></g><g><title>apparmor_socket_sendmsg (75 samples, 0.04%)</title><rect width=".035%" height="15" x="76.174%" y="357" fill="#CFB835" fg:w="75" fg:x="161928"/></g><g><title>aa_sk_perm (55 samples, 0.03%)</title><rect width=".026%" height="15" x="76.184%" y="341" fill="#E05F33" fg:w="55" fg:x="161948"/></g><g><title>sock_sendmsg (11,481 samples, 5.40%)</title><rect width="5.401%" height="15" x="70.812%" y="389" fill="#D4BC2D" fg:w="11481" fg:x="150528"/><text x="71.062%" y="399.5">sock_se..</text></g><g><title>__fget (167 samples, 0.08%)</title><rect width=".079%" height="15" x="76.228%" y="341" fill="#DF9A26" fg:w="167" fg:x="162041"/></g><g><title>__fdget (428 samples, 0.20%)</title><rect width=".201%" height="15" x="76.217%" y="373" fill="#FB1634" fg:w="428" fg:x="162019"/></g><g><title>__fget_light (424 samples, 0.20%)</title><rect width=".2%" height="15" x="76.219%" y="357" fill="#E5D116" fg:w="424" fg:x="162023"/></g><g><title>f_dupfd (222 samples, 0.10%)</title><rect width=".104%" height="15" x="76.314%" y="341" fill="#EA8A22" fg:w="222" fg:x="162225"/></g><g><title>__sys_sendto (12,083 samples, 5.68%)</title><rect width="5.684%" height="15" x="70.738%" y="405" fill="#D45F0B" fg:w="12083" fg:x="150372"/><text x="70.988%" y="415.5">__sys_s..</text></g><g><title>sockfd_lookup_light (446 samples, 0.21%)</title><rect width=".21%" height="15" x="76.213%" y="389" fill="#F0B32F" fg:w="446" fg:x="162009"/></g><g><title>import_single_range (25 samples, 0.01%)</title><rect width=".012%" height="15" x="76.429%" y="405" fill="#F0A30B" fg:w="25" fg:x="162469"/></g><g><title>__arm64_sys_sendto (12,137 samples, 5.71%)</title><rect width="5.71%" height="15" x="70.735%" y="421" fill="#EC250C" fg:w="12137" fg:x="150365"/><text x="70.985%" y="431.5">__arm64..</text></g><g><title>__libc_send (12,543 samples, 5.90%)</title><rect width="5.901%" height="15" x="70.549%" y="501" fill="#E8A410" fg:w="12543" fg:x="149969"/><text x="70.799%" y="511.5">__libc_s..</text></g><g><title>__libc_send (12,526 samples, 5.89%)</title><rect width="5.893%" height="15" x="70.557%" y="485" fill="#F4CD0F" fg:w="12526" fg:x="149986"/><text x="70.807%" y="495.5">__libc_..</text></g><g><title>el0_svc (12,325 samples, 5.80%)</title><rect width="5.798%" height="15" x="70.651%" y="469" fill="#DF752F" fg:w="12325" fg:x="150187"/><text x="70.901%" y="479.5">el0_svc</text></g><g><title>el0_svc_handler (12,325 samples, 5.80%)</title><rect width="5.798%" height="15" x="70.651%" y="453" fill="#F46B23" fg:w="12325" fg:x="150187"/><text x="70.901%" y="463.5">el0_svc..</text></g><g><title>el0_svc_common.constprop.0 (12,318 samples, 5.79%)</title><rect width="5.795%" height="15" x="70.655%" y="437" fill="#CD8C08" fg:w="12318" fg:x="150194"/><text x="70.905%" y="447.5">el0_svc..</text></g><g><title>__pthread_mutex_unlock_usercnt (114 samples, 0.05%)</title><rect width=".054%" height="15" x="76.449%" y="501" fill="#E4542E" fg:w="114" fg:x="162512"/></g><g><title>rpc_enqueue (140 samples, 0.07%)</title><rect width=".066%" height="15" x="76.507%" y="501" fill="#FEBC09" fg:w="140" fg:x="162634"/></g><g><title>rpc_queue_pdu (13,008 samples, 6.12%)</title><rect width="6.119%" height="15" x="70.457%" y="549" fill="#CE7036" fg:w="13008" fg:x="149774"/><text x="70.707%" y="559.5">rpc_queu..</text></g><g><title>rpc_write_to_socket (12,900 samples, 6.07%)</title><rect width="6.068%" height="15" x="70.508%" y="533" fill="#D85431" fg:w="12900" fg:x="149882"/><text x="70.758%" y="543.5">rpc_writ..</text></g><g><title>rpc_write_to_socket (12,845 samples, 6.04%)</title><rect width="6.043%" height="15" x="70.534%" y="517" fill="#D6C223" fg:w="12845" fg:x="149937"/><text x="70.784%" y="527.5">rpc_writ..</text></g><g><title>zdr_PUTFH4args (37 samples, 0.02%)</title><rect width=".017%" height="15" x="76.634%" y="485" fill="#F91C03" fg:w="37" fg:x="162905"/></g><g><title>zdr_nfs_fh4 (33 samples, 0.02%)</title><rect width=".015%" height="15" x="76.636%" y="469" fill="#DE3834" fg:w="33" fg:x="162909"/></g><g><title>libnfs_zdr_bytes (29 samples, 0.01%)</title><rect width=".014%" height="15" x="76.638%" y="453" fill="#F5D932" fg:w="29" fg:x="162913"/></g><g><title>zdr_nfs_argop4 (177 samples, 0.08%)</title><rect width=".083%" height="15" x="76.612%" y="501" fill="#D5C918" fg:w="177" fg:x="162857"/></g><g><title>zdr_READ4args (92 samples, 0.04%)</title><rect width=".043%" height="15" x="76.651%" y="485" fill="#F8741C" fg:w="92" fg:x="162942"/></g><g><title>zdr_stateid4 (41 samples, 0.02%)</title><rect width=".019%" height="15" x="76.675%" y="469" fill="#DB482B" fg:w="41" fg:x="162993"/></g><g><title>zdr_stateid4 (35 samples, 0.02%)</title><rect width=".017%" height="15" x="76.678%" y="453" fill="#D18A0E" fg:w="35" fg:x="162999"/></g><g><title>libnfs_zdr_opaque (35 samples, 0.02%)</title><rect width=".017%" height="15" x="76.678%" y="437" fill="#DE1221" fg:w="35" fg:x="162999"/></g><g><title>libnfs_zdr_array (263 samples, 0.12%)</title><rect width=".124%" height="15" x="76.585%" y="533" fill="#D5C707" fg:w="263" fg:x="162800"/></g><g><title>zdr_nfs_argop4 (234 samples, 0.11%)</title><rect width=".11%" height="15" x="76.598%" y="517" fill="#FA6E0A" fg:w="234" fg:x="162829"/></g><g><title>zdr_nfs_opnum4 (29 samples, 0.01%)</title><rect width=".014%" height="15" x="76.695%" y="501" fill="#F87B06" fg:w="29" fg:x="163034"/></g><g><title>libnfs_zdr_enum (27 samples, 0.01%)</title><rect width=".013%" height="15" x="76.696%" y="485" fill="#CE5B1F" fg:w="27" fg:x="163036"/></g><g><title>zdr_utf8str_cis (36 samples, 0.02%)</title><rect width=".017%" height="15" x="76.709%" y="533" fill="#D39A0D" fg:w="36" fg:x="163063"/></g><g><title>zdr_utf8string (33 samples, 0.02%)</title><rect width=".015%" height="15" x="76.71%" y="517" fill="#E19407" fg:w="33" fg:x="163066"/></g><g><title>libnfs_zdr_bytes (31 samples, 0.01%)</title><rect width=".015%" height="15" x="76.711%" y="501" fill="#DCA02B" fg:w="31" fg:x="163068"/></g><g><title>fs_virtq_handle_req (20,894 samples, 9.83%)</title><rect width="9.829%" height="15" x="66.902%" y="597" fill="#D53427" fg:w="20894" fg:x="142216"/><text x="67.152%" y="607.5">fs_virtq_handl..</text></g><g><title>vread (14,887 samples, 7.00%)</title><rect width="7.003%" height="15" x="69.727%" y="581" fill="#F38907" fg:w="14887" fg:x="148223"/><text x="69.977%" y="591.5">vread</text></g><g><title>rpc_nfs4_compound_async2 (14,656 samples, 6.89%)</title><rect width="6.894%" height="15" x="69.836%" y="565" fill="#E64F0D" fg:w="14656" fg:x="148454"/><text x="70.086%" y="575.5">rpc_nfs4_..</text></g><g><title>zdr_COMPOUND4args (328 samples, 0.15%)</title><rect width=".154%" height="15" x="76.576%" y="549" fill="#F76917" fg:w="328" fg:x="162782"/></g><g><title>fs_virtq_sm_parse_header (62 samples, 0.03%)</title><rect width=".029%" height="15" x="76.731%" y="597" fill="#DFB329" fg:w="62" fg:x="163110"/></g><g><title>snap_dv_ring_tx_db (198 samples, 0.09%)</title><rect width=".093%" height="15" x="76.818%" y="533" fill="#DA0922" fg:w="198" fg:x="163295"/></g><g><title>fs_virtq_sm_read_data (345 samples, 0.16%)</title><rect width=".162%" height="15" x="76.76%" y="597" fill="#DE6A08" fg:w="345" fg:x="163172"/></g><g><title>snap_dma_q_read (253 samples, 0.12%)</title><rect width=".119%" height="15" x="76.803%" y="581" fill="#D3DC00" fg:w="253" fg:x="163264"/></g><g><title>gga_dma_q_read (239 samples, 0.11%)</title><rect width=".112%" height="15" x="76.81%" y="565" fill="#E53410" fg:w="239" fg:x="163278"/></g><g><title>do_gga_xfer (239 samples, 0.11%)</title><rect width=".112%" height="15" x="76.81%" y="549" fill="#D49B12" fg:w="239" fg:x="163278"/></g><g><title>virtq_sm_release (52 samples, 0.02%)</title><rect width=".025%" height="15" x="76.925%" y="597" fill="#F2150E" fg:w="52" fg:x="163524"/></g><g><title>virtq_common_release (29 samples, 0.01%)</title><rect width=".014%" height="15" x="76.936%" y="581" fill="#DE1330" fg:w="29" fg:x="163547"/></g><g><title>snap_dv_ring_tx_db (143 samples, 0.07%)</title><rect width=".067%" height="15" x="77.075%" y="517" fill="#E82D1B" fg:w="143" fg:x="163842"/></g><g><title>virtq_sm_send_completion (423 samples, 0.20%)</title><rect width=".199%" height="15" x="76.95%" y="597" fill="#F9672A" fg:w="423" fg:x="163576"/></g><g><title>virtq_tunnel_send_comp (372 samples, 0.17%)</title><rect width=".175%" height="15" x="76.974%" y="581" fill="#F65121" fg:w="372" fg:x="163627"/></g><g><title>snap_dma_q_send_completion (355 samples, 0.17%)</title><rect width=".167%" height="15" x="76.982%" y="565" fill="#FC212A" fg:w="355" fg:x="163644"/></g><g><title>dv_dma_q_send_completion (319 samples, 0.15%)</title><rect width=".15%" height="15" x="76.999%" y="549" fill="#D1D429" fg:w="319" fg:x="163680"/></g><g><title>do_dv_xfer_inline (304 samples, 0.14%)</title><rect width=".143%" height="15" x="77.006%" y="533" fill="#CF9A06" fg:w="304" fg:x="163695"/></g><g><title>memcpy (211 samples, 0.10%)</title><rect width=".099%" height="15" x="77.246%" y="533" fill="#DF402F" fg:w="211" fg:x="164206"/></g><g><title>__GI_memcpy (209 samples, 0.10%)</title><rect width=".098%" height="15" x="77.247%" y="517" fill="#D3A126" fg:w="209" fg:x="164208"/></g><g><title>snap_dv_ring_tx_db (36 samples, 0.02%)</title><rect width=".017%" height="15" x="77.349%" y="533" fill="#DB8A28" fg:w="36" fg:x="164424"/></g><g><title>snap_dma_q_write_short (393 samples, 0.18%)</title><rect width=".185%" height="15" x="77.186%" y="581" fill="#F1E42E" fg:w="393" fg:x="164079"/></g><g><title>dv_dma_q_write_short (348 samples, 0.16%)</title><rect width=".164%" height="15" x="77.208%" y="565" fill="#DFD126" fg:w="348" fg:x="164124"/></g><g><title>do_dv_xfer_inline (337 samples, 0.16%)</title><rect width=".159%" height="15" x="77.213%" y="549" fill="#ECA42D" fg:w="337" fg:x="164135"/></g><g><title>dv_dma_q_progress_tx (48,343 samples, 22.74%)</title><rect width="22.742%" height="15" x="54.634%" y="629" fill="#E70F05" fg:w="48343" fg:x="116138"/><text x="54.884%" y="639.5">dv_dma_q_progress_tx</text></g><g><title>virtq_cmd_progress (22,352 samples, 10.51%)</title><rect width="10.515%" height="15" x="66.861%" y="613" fill="#FC230F" fg:w="22352" fg:x="142129"/><text x="67.111%" y="623.5">virtq_cmd_progr..</text></g><g><title>virtq_sm_write_status (482 samples, 0.23%)</title><rect width=".227%" height="15" x="77.149%" y="597" fill="#F8B512" fg:w="482" fg:x="163999"/></g><g><title>snap_dma_q_progress (82,002 samples, 38.58%)</title><rect width="38.576%" height="15" x="38.807%" y="645" fill="#E9272A" fg:w="82002" fg:x="82495"/><text x="39.057%" y="655.5">snap_dma_q_progress</text></g><g><title>ck_pr_md_load_uint (1,645 samples, 0.77%)</title><rect width=".774%" height="15" x="80.018%" y="597" fill="#EE6E21" fg:w="1645" fg:x="170098"/></g><g><title>ck_ring_dequeue_spsc (5,883 samples, 2.77%)</title><rect width="2.768%" height="15" x="78.117%" y="629" fill="#E9C30A" fg:w="5883" fg:x="166058"/><text x="78.367%" y="639.5">ck..</text></g><g><title>_ck_ring_dequeue_sc (5,883 samples, 2.77%)</title><rect width="2.768%" height="15" x="78.117%" y="613" fill="#FE6903" fg:w="5883" fg:x="166058"/><text x="78.367%" y="623.5">_c..</text></g><g><title>memcpy (196 samples, 0.09%)</title><rect width=".092%" height="15" x="80.793%" y="597" fill="#DDE109" fg:w="196" fg:x="171745"/></g><g><title>snap_dv_ring_tx_db (161 samples, 0.08%)</title><rect width=".076%" height="15" x="81.007%" y="549" fill="#E0E32D" fg:w="161" fg:x="172200"/></g><g><title>snap_dv_set_comp (87 samples, 0.04%)</title><rect width=".041%" height="15" x="81.082%" y="549" fill="#E5C62B" fg:w="87" fg:x="172361"/></g><g><title>virtq_progress_done_cmds (7,955 samples, 3.74%)</title><rect width="3.742%" height="15" x="77.383%" y="645" fill="#CED123" fg:w="7955" fg:x="164497"/><text x="77.633%" y="655.5">virt..</text></g><g><title>virtq_cmd_progress (508 samples, 0.24%)</title><rect width=".239%" height="15" x="80.886%" y="629" fill="#F5C335" fg:w="508" fg:x="171944"/></g><g><title>sm_handle_in_iov_done (490 samples, 0.23%)</title><rect width=".231%" height="15" x="80.895%" y="613" fill="#F05C1A" fg:w="490" fg:x="171962"/></g><g><title>snap_dma_q_write (353 samples, 0.17%)</title><rect width=".166%" height="15" x="80.959%" y="597" fill="#CF2817" fg:w="353" fg:x="172099"/></g><g><title>gga_dma_q_write (330 samples, 0.16%)</title><rect width=".155%" height="15" x="80.97%" y="581" fill="#DF6F23" fg:w="330" fg:x="172122"/></g><g><title>do_gga_xfer (326 samples, 0.15%)</title><rect width=".153%" height="15" x="80.972%" y="565" fill="#E5931C" fg:w="326" fg:x="172126"/></g><g><title>__softirqentry_text_start (26 samples, 0.01%)</title><rect width=".012%" height="15" x="94.187%" y="565" fill="#D31D1C" fg:w="26" fg:x="200218"/></g><g><title>el0_irq_naked (27 samples, 0.01%)</title><rect width=".013%" height="15" x="94.187%" y="629" fill="#E44821" fg:w="27" fg:x="200218"/></g><g><title>gic_handle_irq (27 samples, 0.01%)</title><rect width=".013%" height="15" x="94.187%" y="613" fill="#CDD61F" fg:w="27" fg:x="200218"/></g><g><title>__handle_domain_irq (27 samples, 0.01%)</title><rect width=".013%" height="15" x="94.187%" y="597" fill="#E06F0F" fg:w="27" fg:x="200218"/></g><g><title>irq_exit (27 samples, 0.01%)</title><rect width=".013%" height="15" x="94.187%" y="581" fill="#FD151A" fg:w="27" fg:x="200218"/></g><g><title>snap_virtio_ctrl_queue_progress (151,487 samples, 71.26%)</title><rect width="71.263%" height="15" x="24.149%" y="677" fill="#F58B2B" fg:w="151487" fg:x="51334"/><text x="24.399%" y="687.5">snap_virtio_ctrl_queue_progress</text></g><g><title>virtq_progress (136,981 samples, 64.44%)</title><rect width="64.439%" height="15" x="30.973%" y="661" fill="#FCAA07" fg:w="136981" fg:x="65840"/><text x="31.223%" y="671.5">virtq_progress</text></g><g><title>virtq_progress_unordered (30,369 samples, 14.29%)</title><rect width="14.286%" height="15" x="81.125%" y="645" fill="#E7760E" fg:w="30369" fg:x="172452"/><text x="81.375%" y="655.5">virtq_progress_unorder..</text></g><g><title>fs_virtq_get_avail_cmd (2,576 samples, 1.21%)</title><rect width="1.212%" height="15" x="94.2%" y="629" fill="#EE5300" fg:w="2576" fg:x="200245"/></g><g><title>snap_virtio_ctrl_pg_thread_io_progress (192,635 samples, 90.62%)</title><rect width="90.62%" height="15" x="4.8%" y="693" fill="#DD2727" fg:w="192635" fg:x="10204"/><text x="5.05%" y="703.5">snap_virtio_ctrl_pg_thread_io_progress</text></g><g><title>_start (203,529 samples, 95.74%)</title><rect width="95.745%" height="15" x="0%" y="821" fill="#DE772E" fg:w="203529" fg:x="0"/><text x=".25%" y="831.5">_start</text></g><g><title>__libc_start_main (203,529 samples, 95.74%)</title><rect width="95.745%" height="15" x="0%" y="805" fill="#DEA531" fg:w="203529" fg:x="0"/><text x=".25%" y="815.5">__libc_start_main</text></g><g><title>main (203,529 samples, 95.74%)</title><rect width="95.745%" height="15" x="0%" y="789" fill="#DB7134" fg:w="203529" fg:x="0"/><text x=".25%" y="799.5">main</text></g><g><title>virtionfs_main (203,529 samples, 95.74%)</title><rect width="95.745%" height="15" x="0%" y="773" fill="#D6070F" fg:w="203529" fg:x="0"/><text x=".25%" y="783.5">virtionfs_main</text></g><g><title>virtiofs_emu_fuse_ll_main (203,529 samples, 95.74%)</title><rect width="95.745%" height="15" x="0%" y="757" fill="#EB2004" fg:w="203529" fg:x="0"/><text x=".25%" y="767.5">virtiofs_emu_fuse_ll_main</text></g><g><title>virtiofs_emu_ll_loop (203,529 samples, 95.74%)</title><rect width="95.745%" height="15" x="0%" y="741" fill="#EE5A36" fg:w="203529" fg:x="0"/><text x=".25%" y="751.5">virtiofs_emu_ll_loop</text></g><g><title>virtiofs_emu_ll_loop_singlethreaded (203,529 samples, 95.74%)</title><rect width="95.745%" height="15" x="0%" y="725" fill="#D5D013" fg:w="203529" fg:x="0"/><text x=".25%" y="735.5">virtiofs_emu_ll_loop_singlethreaded</text></g><g><title>virtio_fs_ctrl_progress_io (195,011 samples, 91.74%)</title><rect width="91.737%" height="15" x="4.007%" y="709" fill="#E99C04" fg:w="195011" fg:x="8518"/><text x="4.257%" y="719.5">virtio_fs_ctrl_progress_io</text></g><g><title>snap_virtio_fs_ctrl_io_progress_thread (690 samples, 0.32%)</title><rect width=".325%" height="15" x="95.42%" y="693" fill="#CFC205" fg:w="690" fg:x="202839"/></g><g><title>libnfs_zdr_bytes@plt (54 samples, 0.03%)</title><rect width=".025%" height="15" x="95.764%" y="821" fill="#CE6F1E" fg:w="54" fg:x="203571"/></g><g><title>libnfs_zdr_int@plt (32 samples, 0.02%)</title><rect width=".015%" height="15" x="95.805%" y="821" fill="#F34636" fg:w="32" fg:x="203658"/></g><g><title>libnfs_zdr_u_int@plt (75 samples, 0.04%)</title><rect width=".035%" height="15" x="95.832%" y="821" fill="#F21C08" fg:w="75" fg:x="203714"/></g><g><title>memcpy@plt (120 samples, 0.06%)</title><rect width=".057%" height="15" x="95.874%" y="821" fill="#DB6A12" fg:w="120" fg:x="203803"/></g><g><title>memset@plt (22 samples, 0.01%)</title><rect width=".01%" height="15" x="95.93%" y="821" fill="#F4DE0A" fg:w="22" fg:x="203923"/></g><g><title>nfs_mt_mutex_lock@plt (40 samples, 0.02%)</title><rect width=".019%" height="15" x="95.944%" y="821" fill="#ECB334" fg:w="40" fg:x="203953"/></g><g><title>pthread_mutex_lock@plt (56 samples, 0.03%)</title><rect width=".026%" height="15" x="95.97%" y="821" fill="#D51727" fg:w="56" fg:x="204009"/></g><g><title>pthread_mutex_unlock@plt (27 samples, 0.01%)</title><rect width=".013%" height="15" x="95.997%" y="821" fill="#EE300A" fg:w="27" fg:x="204065"/></g><g><title>pthread_spin_lock@plt (822 samples, 0.39%)</title><rect width=".387%" height="15" x="96.009%" y="821" fill="#FBC417" fg:w="822" fg:x="204092"/></g><g><title>pthread_spin_unlock@plt (716 samples, 0.34%)</title><rect width=".337%" height="15" x="96.396%" y="821" fill="#FA9818" fg:w="716" fg:x="204914"/></g><g><title>rpc_allocate_pdu2@plt (31 samples, 0.01%)</title><rect width=".015%" height="15" x="96.733%" y="821" fill="#D19611" fg:w="31" fg:x="205630"/></g><g><title>rpc_enqueue@plt (37 samples, 0.02%)</title><rect width=".017%" height="15" x="96.748%" y="821" fill="#EACA22" fg:w="37" fg:x="205661"/></g><g><title>rpc_hash_xid@plt (30 samples, 0.01%)</title><rect width=".014%" height="15" x="96.765%" y="821" fill="#FD9435" fg:w="30" fg:x="205698"/></g><g><title>rpc_queue_pdu@plt (31 samples, 0.01%)</title><rect width=".015%" height="15" x="96.787%" y="821" fill="#DA8110" fg:w="31" fg:x="205744"/></g><g><title>snap_dma_q_progress@plt (1,563 samples, 0.74%)</title><rect width=".735%" height="15" x="96.807%" y="821" fill="#D85513" fg:w="1563" fg:x="205788"/></g><g><title>snap_dma_q_send_completion@plt (26 samples, 0.01%)</title><rect width=".012%" height="15" x="97.547%" y="821" fill="#EBE407" fg:w="26" fg:x="207361"/></g><g><title>snap_update_pci_bdf@plt (22 samples, 0.01%)</title><rect width=".01%" height="15" x="97.574%" y="821" fill="#F5AF00" fg:w="22" fg:x="207417"/></g><g><title>snap_virtio_ctrl_pg_io_progress@plt (972 samples, 0.46%)</title><rect width=".457%" height="15" x="97.59%" y="821" fill="#D0A824" fg:w="972" fg:x="207452"/></g><g><title>snap_virtio_fs_ctrl_io_progress_thread@plt (683 samples, 0.32%)</title><rect width=".321%" height="15" x="98.06%" y="821" fill="#F6AB18" fg:w="683" fg:x="208451"/></g><g><title>to_fs_ctx@plt (1,564 samples, 0.74%)</title><rect width=".736%" height="15" x="98.406%" y="821" fill="#D78E18" fg:w="1564" fg:x="209187"/></g><g><title>virtq_cmd_progress@plt (38 samples, 0.02%)</title><rect width=".018%" height="15" x="99.142%" y="821" fill="#FABB07" fg:w="38" fg:x="210751"/></g><g><title>virtq_progress@plt (1,423 samples, 0.67%)</title><rect width=".669%" height="15" x="99.16%" y="821" fill="#E44221" fg:w="1423" fg:x="210789"/></g><g><title>zdr_COMPOUND4args@plt (41 samples, 0.02%)</title><rect width=".019%" height="15" x="99.841%" y="821" fill="#EAD715" fg:w="41" fg:x="212238"/></g><g><title>zdr_GETATTR4args@plt (32 samples, 0.02%)</title><rect width=".015%" height="15" x="99.861%" y="821" fill="#DEBF14" fg:w="32" fg:x="212279"/></g><g><title>zdr_PUTFH4args@plt (31 samples, 0.01%)</title><rect width=".015%" height="15" x="99.876%" y="821" fill="#F54F36" fg:w="31" fg:x="212311"/></g><g><title>zdr_nfs_fh4@plt (45 samples, 0.02%)</title><rect width=".021%" height="15" x="99.912%" y="821" fill="#F00A25" fg:w="45" fg:x="212388"/></g><g><title>zdr_nfs_opnum4@plt (38 samples, 0.02%)</title><rect width=".018%" height="15" x="99.933%" y="821" fill="#D6C020" fg:w="38" fg:x="212433"/></g><g><title>zdr_offset4@plt (22 samples, 0.01%)</title><rect width=".01%" height="15" x="99.951%" y="821" fill="#D12436" fg:w="22" fg:x="212471"/></g><g><title>zdr_utf8str_cs@plt (31 samples, 0.01%)</title><rect width=".015%" height="15" x="99.97%" y="821" fill="#DC0A0B" fg:w="31" fg:x="212512"/></g><g><title>all (212,575 samples, 100%)</title><rect width="100%" height="15" x="0%" y="853" fill="#DD6A11" fg:w="212575" fg:x="0"/></g><g><title>virtionfs (212,575 samples, 100.00%)</title><rect width="100%" height="15" x="0%" y="837" fill="#FB8E2C" fg:w="212575" fg:x="0"/><text x=".25%" y="847.5">virtionfs</text></g><g><title>zdr_utf8string@plt (32 samples, 0.02%)</title><rect width=".015%" height="15" x="99.985%" y="821" fill="#EE0D0F" fg:w="32" fg:x="212543"/></g></svg></svg>
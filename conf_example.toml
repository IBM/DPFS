[snap_hal]
# Time between every poll
polling_interval_usec = 0
# Physical Function IDs
# When multiple PFs are supplied, multiple virtio-fs devices will be created
# The index of this array is the device_id supplied by the HAL to the backend
pf_ids = [ 0 ]
# Emulation manager, DPU specific
emu_manager = "mlx5_0"
# Must be a power of 2 and >= 1! The virtio-fs specification requires this
queue_depth = 64
# Filesystem tag (i.e. the name of the virtiofs device to mount for the host)
# The PF ID will be prepended to this tag e.g. "dpfs-0"
tag = "dpfs"
# int = n threads that each own pf_ids/int devices
# "dynamic" = dynamic threading ala https://spdk.io/doc/scheduler.html
nthreads = 1
# The number of Virtio requests, currently the driver and DPFS only support a single queue
#virtio_request_queues = 1

[rvfs_hal]
# Time between every poll
polling_interval_usec = 0

[nfs]
# The NFS server that you want to mirror
server = "10.100.0.1"
# The NFS server's path that you want to mirror
export = "/mnt/shared"

# This is for dpfs_rvfs_dpu and the dpfs_hal implementation that uses RVFS
[rvfs]
remote_uri = "10.100.0.1:31850"
dpu_uri = "10.100.0.115:31850"
# If enabled then rvfs_dpu will do RVFS and hal polling on two seperate threads
# TODO make this work for the RVFS version of hal as well?
two_threads = true

[kv]
# The remote RAMCloud server that KV will connect to
ramcloud_coordinator = "PLACEHOLDER"

[local_mirror]
dir = "/mnt/nfs_flex01"
# If 0, then metadata cache is fully disabled
# Value is in seconds, integers and doubles are accepted
metadata_timeout = 86400.0 # 24 hours
# Enables userspace polling on the completion queue
# This causes high CPU usage!
uring_cq_polling = false
